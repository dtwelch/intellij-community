package com.jetbrains.resolve.completion;

import com.intellij.codeInsight.completion.*;
import com.intellij.codeInsight.lookup.LookupElement;
import com.intellij.codeInsight.lookup.LookupElementBuilder;
import com.intellij.codeInsight.lookup.LookupElementPresentation;
import com.intellij.codeInsight.lookup.LookupElementRenderer;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorModificationUtil;
import com.intellij.psi.PsiElement;
import com.intellij.util.ProcessingContext;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.LinkedHashMap;
import java.util.Map;

import static com.intellij.patterns.PlatformPatterns.psiElement;

public class MathSymbolCompletionContributor extends CompletionContributor {

  public static final Map<String, String> SYMBOL_MAP = new LinkedHashMap<>();

  public MathSymbolCompletionContributor() {
    populateMap();
    extend(CompletionType.BASIC, psiElement(), new CompletionProvider<CompletionParameters>() {
      @Override
      protected void addCompletions(@NotNull final CompletionParameters parameters,
                                    ProcessingContext context,
                                    @NotNull CompletionResultSet result) {

        Editor editor = parameters.getEditor();
        Document doc = editor.getDocument();
        if (parameters.getOffset() > 1 &&
            doc.getCharsSequence().charAt(parameters.getOffset() - 1) == '\\') {
          //so I think we want to pretty much add all elements in our symbol map
          Map<String, String> x = SYMBOL_MAP;
          for (Map.Entry<String, String> keyword : SYMBOL_MAP.entrySet()) {
            result.addElement(createMathSymbolLookupElement(keyword.getKey(), keyword.getValue()));
          }
        }
      }
    });
  }

  @NotNull
  private LookupElement createMathSymbolLookupElement(@NotNull final String symbolCommand, String symbol) {
    final InsertHandler<LookupElement> handler = createMathSymbolInsertHandler(symbolCommand, symbol);

    return createKeywordLookupElement(symbolCommand, symbol, handler);
  }

  @NotNull
  public static InsertHandler<LookupElement> createMathSymbolInsertHandler(@NotNull final String symbolCommand,
                                                                           @NotNull final String symbol) {
    return new InsertHandler<LookupElement>() {
      @Override
      public void handleInsert(@NotNull InsertionContext context, LookupElement item) {
        Editor editor = context.getEditor();
        if (context.getStartOffset() - 1 > 0) {
          editor.getDocument().deleteString(context.getStartOffset() - 1, context.getTailOffset());
          EditorModificationUtil.insertStringAtCaret(editor, symbol);
        }
      }
    };
  }

  @NotNull
  private static LookupElement createKeywordLookupElement(@NotNull final String symbolCommand,
                                                          @NotNull final String symbol,
                                                          @Nullable InsertHandler<LookupElement> insertHandler) {
    LookupElementBuilder builder = LookupElementBuilder.create(symbolCommand)
      .withBoldness(true)
      .withInsertHandler(insertHandler)
      .withRenderer(new LookupElementRenderer<LookupElement>() {
        @Override
        public void renderElement(LookupElement element, LookupElementPresentation p) {
          //why have one char of blank tail text? See:
          //https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000666150-Keeping-completion-list-open-on-an-exact-single-match
          //
          //this was easier than subclassing.
          p.setTailText(" ");
          p.setItemText(symbolCommand);
          p.setTypeText(symbol);
        }
      });

    return PrioritizedLookupElement.withPriority(builder, ResolveCompletionUtil.VAR_PRIORITY);
  }

  private void populateMap() {
    //Arrows
    SYMBOL_MAP.put("longleftarrow", "‚üµ");
    SYMBOL_MAP.put("Longleftarrow", "‚ü∏");
    SYMBOL_MAP.put("longrightarrow", "‚ü∂");
    SYMBOL_MAP.put("Longrightarrow", "‚üπ");
    SYMBOL_MAP.put("longleftrightarrow", "‚ü∑");
    SYMBOL_MAP.put("Longleftrightarrow", "‚ü∫");
    SYMBOL_MAP.put("hookleftarrow", "‚Ü©");
    SYMBOL_MAP.put("hookrightarrow", "‚Ü™");
    SYMBOL_MAP.put("leftharpoondown", "‚ÜΩ");
    SYMBOL_MAP.put("rightharpoondown", "‚áÅ");
    SYMBOL_MAP.put("leftharpoonup", "‚Üº");
    SYMBOL_MAP.put("rightharpoonup", "‚áÄ");
    SYMBOL_MAP.put("downharpoonleft", "‚áÉ");
    SYMBOL_MAP.put("downharpoonright", "‚áÇ");
    SYMBOL_MAP.put("upharpoonleft", "‚Üø");
    SYMBOL_MAP.put("upharpoonright", "‚Üæ");
    SYMBOL_MAP.put("uparrow", "‚Üë");
    SYMBOL_MAP.put("Uparrow", "‚áë");
    SYMBOL_MAP.put("downarrow", "‚Üì");
    SYMBOL_MAP.put("Downarrow", "‚áì");

    //Big Operators
    SYMBOL_MAP.put("bigwedge", "‚ãÄ");
    SYMBOL_MAP.put("bigvee", "‚ãÅ");
    SYMBOL_MAP.put("bigcap", "‚ãÇ");
    SYMBOL_MAP.put("bigcup", "‚ãÉ");
    SYMBOL_MAP.put("biguplus", "‚®Ñ");
    SYMBOL_MAP.put("bigoplus", "‚®Å");
    SYMBOL_MAP.put("bigotimes", "‚®Ç");
    SYMBOL_MAP.put("bigodot", "‚®Ä");
    SYMBOL_MAP.put("prod", "‚àè");
    SYMBOL_MAP.put("sum", "‚àë");

    //Operators
    SYMBOL_MAP.put("wedge", "‚àß");
    SYMBOL_MAP.put("vee", "‚à®");
    SYMBOL_MAP.put("neg", "¬¨");
    SYMBOL_MAP.put("cap", "‚à©");
    SYMBOL_MAP.put("cup", "‚à™");
    SYMBOL_MAP.put("uplus", "‚äé");
    SYMBOL_MAP.put("oplus", "‚äï");
    SYMBOL_MAP.put("otimes", "‚äó");
    SYMBOL_MAP.put("odot", "‚äô");
    SYMBOL_MAP.put("ominus", "‚äñ");
    SYMBOL_MAP.put("propto", "‚àù");
    SYMBOL_MAP.put("times", "√ó");
    SYMBOL_MAP.put("star", "‚ãÜ");
    SYMBOL_MAP.put("bullet", "‚àô");
    SYMBOL_MAP.put("circ", "‚àò");
    SYMBOL_MAP.put("sim", "‚àº");
    SYMBOL_MAP.put("bowtie", "‚ãà");
    SYMBOL_MAP.put("ltimes", "‚ãâ");
    SYMBOL_MAP.put("rtimes", "‚ãä");

    //Relations
    SYMBOL_MAP.put("leq", "‚â§");
    SYMBOL_MAP.put("geq", "‚â•");
    SYMBOL_MAP.put("neq", "‚â†");
    SYMBOL_MAP.put("ll", "‚â™");
    SYMBOL_MAP.put("gg", "‚â´");
    SYMBOL_MAP.put("lesssim", "‚â≤");
    SYMBOL_MAP.put("gtrsim", "‚â≥");
    SYMBOL_MAP.put("in", "‚àà");
    SYMBOL_MAP.put("notin", "‚àâ");
    SYMBOL_MAP.put("subset", "‚äÇ");
    SYMBOL_MAP.put("supset", "‚äÉ");
    SYMBOL_MAP.put("subseteq", "‚äÜ");
    SYMBOL_MAP.put("supseteq", "‚äá");
    SYMBOL_MAP.put("doteq", "‚âê");
    SYMBOL_MAP.put("simeq", "‚âÉ");
    SYMBOL_MAP.put("approx", "‚âà");
    SYMBOL_MAP.put("equiv", "‚â°");
    SYMBOL_MAP.put("preccurlyeq", "‚âº");
    SYMBOL_MAP.put("succcurlyeq", "‚âΩ");
    SYMBOL_MAP.put("triangleleft", "‚ä≤");
    SYMBOL_MAP.put("triangleright", "‚ä≥");
    SYMBOL_MAP.put("trianglelefteq", "‚ä¥");
    SYMBOL_MAP.put("trianglerighteq", "‚äµ");

    //Brackets
    SYMBOL_MAP.put("langle", "‚ü®");
    SYMBOL_MAP.put("rangle", "‚ü©");
    SYMBOL_MAP.put("lceil", "‚åà");
    SYMBOL_MAP.put("rceil", "‚åâ");
    //SYMBOL_MAP.put("lcup", "‚éù");
    //SYMBOL_MAP.put("rcup", "‚é†");
    SYMBOL_MAP.put("dblbar", "‚à•");

    //Greek
    SYMBOL_MAP.put("alpha", "Œ±");
    SYMBOL_MAP.put("beta", "Œ≤");
    SYMBOL_MAP.put("gamma", "Œ≥");
    SYMBOL_MAP.put("delta", "Œ¥");
    SYMBOL_MAP.put("epsilon", "Œµ");
    SYMBOL_MAP.put("zeta", "Œ∂");
    SYMBOL_MAP.put("eta", "Œ∑");
    SYMBOL_MAP.put("theta", "Œ∏");
    SYMBOL_MAP.put("iota", "Œπ");
    SYMBOL_MAP.put("kappa", "Œ∫");
    SYMBOL_MAP.put("mu", "Œº");
    SYMBOL_MAP.put("nu", "ŒΩ");
    SYMBOL_MAP.put("xi", "Œæ");
    SYMBOL_MAP.put("pi", "œÄ");
    SYMBOL_MAP.put("rho", "œÅ");
    SYMBOL_MAP.put("sigma", "œÉ");
    SYMBOL_MAP.put("tau", "œÑ");
    SYMBOL_MAP.put("phi", "œï");
    SYMBOL_MAP.put("varphi", "œÜ");
    SYMBOL_MAP.put("chi", "œá");
    SYMBOL_MAP.put("psi", "œà");
    SYMBOL_MAP.put("omega", "œâ");
    SYMBOL_MAP.put("Gamma", "Œì");
    SYMBOL_MAP.put("Delta", "Œî");
    SYMBOL_MAP.put("Theta", "Œò");
    SYMBOL_MAP.put("Lambda", "Œõ");
    SYMBOL_MAP.put("Xi", "Œû");
    SYMBOL_MAP.put("Sigma", "Œ£");
    SYMBOL_MAP.put("Phi", "Œ¶");
    SYMBOL_MAP.put("Psi", "Œ®");
    SYMBOL_MAP.put("Omega", "Œ©");

    //Letters
    SYMBOL_MAP.put("Nat", "‚Ñï");
    SYMBOL_MAP.put("Int", "‚Ñ§");
    SYMBOL_MAP.put("Complex", "‚ÑÇ");
    SYMBOL_MAP.put("Bool", "\uD835\uDD39");
    SYMBOL_MAP.put("Rat", "‚Ñö");
    SYMBOL_MAP.put("Real", "‚Ñù");
    SYMBOL_MAP.put("Powerclass", "ùí´");
    SYMBOL_MAP.put("Powerset", "‚Ñò");

    SYMBOL_MAP.put("AA", "ùíú");
    SYMBOL_MAP.put("BB", "‚Ñ¨");
    SYMBOL_MAP.put("CC", "ùíû");
    SYMBOL_MAP.put("DD", "ùíü");
    SYMBOL_MAP.put("EE", "‚Ñ∞");
    SYMBOL_MAP.put("FF", "‚Ñ±");
    SYMBOL_MAP.put("GG", "ùí¢");
    SYMBOL_MAP.put("HH", "‚Ñã");
    SYMBOL_MAP.put("II", "‚Ñê");
    SYMBOL_MAP.put("JJ", "ùí•");
    SYMBOL_MAP.put("KK", "ùí¶");
    SYMBOL_MAP.put("LL", "‚Ñí");
    SYMBOL_MAP.put("MM", "‚Ñ≥");
    SYMBOL_MAP.put("NN", "ùí©");
    SYMBOL_MAP.put("OO", "ùí™");
    SYMBOL_MAP.put("PP", "ùí´");
    SYMBOL_MAP.put("QQ", "ùí¨");
    SYMBOL_MAP.put("RR", "‚Ñõ");
    SYMBOL_MAP.put("SS", "ùíÆ");
    SYMBOL_MAP.put("TT", "ùíØ");
    SYMBOL_MAP.put("UU", "ùí∞");
    SYMBOL_MAP.put("VV", "ùí±");
    SYMBOL_MAP.put("WW", "ùí≤");
    SYMBOL_MAP.put("XX", "ùí≥");
    SYMBOL_MAP.put("YY", "ùí¥");
    SYMBOL_MAP.put("ZZ", "ùíµ");

    //Builtin
    SYMBOL_MAP.put("forall", "‚àÄ");
    SYMBOL_MAP.put("exists", "‚àÉ");
    SYMBOL_MAP.put("lambda", "Œª");
    SYMBOL_MAP.put("triangleq", "‚âú");
    //SYMBOL_MAP.put("tricolon", "Àê");
  }

  public boolean invokeAutoPopup(@NotNull PsiElement position, char typeChar) {
    return typeChar == '\\';
  }
}
