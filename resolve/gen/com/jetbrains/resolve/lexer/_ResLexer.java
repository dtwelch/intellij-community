/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.resolve.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.resolve.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.jetbrains.resolve.ResolveParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15456 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\35\1\36\1\37\2\23\1\15\1\40\3\23\1\41\10\23\1\42\1\43\5\15\1\44"+
    "\1\45\11\23\1\46\2\23\1\47\5\23\1\50\4\23\1\51\1\52\4\23\51\15\1\53\3\15\1"+
    "\54\1\55\4\15\1\56\12\23\1\57\u0381\23");

  /* The ZZ_CMAP_Y table has 3072 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\15\34"+
    "\13\1\16\1\17\1\20\10\1\1\21\1\22\1\23\1\24\1\25\3\23\1\26\10\13\1\27\12\13"+
    "\1\30\1\13\1\31\1\30\1\13\1\32\4\1\1\13\1\33\1\34\2\1\2\13\1\33\1\1\1\35\1"+
    "\30\5\13\1\36\1\37\1\40\1\1\1\41\1\13\1\1\1\42\5\13\1\43\1\44\1\45\1\13\1"+
    "\33\1\46\1\13\1\47\1\50\1\1\1\13\1\51\4\1\1\13\1\52\4\1\1\53\2\13\1\54\1\1"+
    "\1\55\1\56\1\30\1\57\1\60\1\61\1\62\1\63\1\64\1\56\1\65\1\66\1\60\1\61\1\67"+
    "\1\1\1\70\1\71\1\72\1\73\1\74\1\61\1\75\1\1\1\76\1\56\1\77\1\100\1\60\1\61"+
    "\1\75\1\1\1\64\1\56\1\44\1\101\1\102\1\103\1\104\1\1\1\76\1\71\1\1\1\105\1"+
    "\41\1\61\1\54\1\1\1\106\1\56\1\1\1\107\1\41\1\61\1\110\1\1\1\63\1\56\1\111"+
    "\1\105\1\41\1\13\1\112\1\63\1\113\1\56\1\114\1\115\1\116\1\13\1\117\1\120"+
    "\1\1\1\71\1\1\1\30\2\13\1\121\1\120\1\122\2\1\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\2\1\1\76\1\1\1\122\1\1\1\131\1\13\1\132\1\1\1\133\7\1\2\13\1\33\1\134"+
    "\1\122\1\135\1\136\1\137\1\140\1\122\2\13\1\141\2\13\1\142\24\13\1\143\1\144"+
    "\2\13\1\143\2\13\1\145\1\146\1\15\3\13\1\146\3\13\1\33\2\1\1\13\1\1\5\13\1"+
    "\147\1\30\45\13\1\150\1\13\1\30\1\33\4\13\1\33\1\151\1\152\1\65\1\13\1\65"+
    "\1\13\1\65\1\152\1\76\3\13\1\153\1\1\1\154\1\122\2\1\1\122\5\13\1\32\1\155"+
    "\1\13\1\156\4\13\1\43\1\13\1\157\2\1\1\71\1\13\1\160\1\161\2\13\1\162\1\13"+
    "\1\104\1\122\2\1\1\13\1\120\3\13\1\161\2\1\2\122\1\163\5\1\1\115\2\13\1\153"+
    "\1\164\1\122\2\1\1\165\1\13\1\166\1\45\2\13\1\43\1\1\2\13\1\153\1\1\1\167"+
    "\1\45\1\13\1\160\1\51\5\1\1\170\1\171\14\13\4\1\21\13\1\147\2\13\1\147\1\172"+
    "\1\13\1\160\3\13\1\173\1\174\1\175\1\132\1\174\2\1\1\176\1\177\3\1\1\200\1"+
    "\1\1\132\6\1\1\201\1\202\1\203\1\204\1\205\3\1\1\206\1\207\1\210\1\211\1\212"+
    "\1\207\2\1\1\213\1\214\1\215\1\216\1\217\1\220\1\221\1\222\1\223\1\224\1\1"+
    "\1\225\1\226\3\1\1\227\115\1\1\230\1\231\40\1\1\232\37\1\2\13\1\157\2\13\1"+
    "\157\10\13\1\233\1\234\2\13\1\141\3\13\1\235\1\1\1\13\1\120\4\236\4\1\1\134"+
    "\35\1\1\237\2\1\1\240\1\30\4\13\1\241\1\30\4\13\1\142\1\115\1\13\1\160\1\30"+
    "\4\13\1\157\1\1\1\13\1\33\3\1\1\13\40\1\133\13\1\43\4\1\135\13\1\43\2\1\10"+
    "\13\1\132\4\1\2\13\1\160\20\13\1\132\1\13\1\242\1\1\2\13\1\157\1\134\1\13"+
    "\1\160\4\13\1\43\2\1\1\243\1\244\5\13\1\245\1\13\1\157\1\32\3\1\1\243\1\246"+
    "\1\13\1\34\1\1\3\13\1\153\1\244\2\13\1\153\1\1\1\122\1\1\1\247\1\45\1\13\1"+
    "\43\1\13\1\120\1\1\1\13\1\132\1\53\2\13\1\34\1\134\1\122\1\250\1\251\2\13"+
    "\1\51\1\1\1\252\1\122\1\13\1\253\3\13\1\254\1\255\1\256\1\33\1\72\1\257\1"+
    "\260\1\236\2\13\1\142\1\43\7\13\1\34\1\122\72\13\1\153\1\13\1\261\2\13\1\162"+
    "\120\1\26\13\1\160\6\13\1\104\2\1\1\120\1\262\1\61\1\263\1\264\6\13\1\65\1"+
    "\1\1\165\25\13\1\160\1\1\4\13\1\244\2\13\1\32\2\1\1\162\7\1\1\250\7\13\1\132"+
    "\1\1\1\122\1\30\1\33\1\30\1\33\1\265\4\13\1\157\1\266\1\267\2\1\1\270\1\13"+
    "\1\15\1\271\2\160\2\1\7\13\1\33\30\1\1\13\1\132\3\13\1\76\2\1\2\13\1\1\1\13"+
    "\1\272\2\13\1\43\1\13\1\160\2\13\1\273\3\1\11\13\1\160\1\122\2\13\1\273\1"+
    "\13\1\162\2\13\1\32\3\13\1\153\11\1\23\13\1\120\1\13\1\43\1\32\11\1\1\274"+
    "\2\13\1\275\1\13\1\43\1\13\1\120\1\13\1\157\4\1\1\13\1\276\1\13\1\43\1\13"+
    "\1\104\4\1\3\13\1\277\4\1\1\76\1\300\1\13\1\153\2\1\1\13\1\132\1\13\1\132"+
    "\2\1\1\131\1\13\1\161\1\1\3\13\1\43\1\13\1\43\1\13\1\34\1\13\1\65\6\1\4\13"+
    "\1\51\3\1\3\13\1\34\3\13\1\34\60\1\1\165\2\13\1\32\2\1\1\71\1\1\1\165\2\13"+
    "\2\1\1\13\1\51\1\122\1\165\1\13\1\120\1\71\1\1\2\13\1\301\1\165\2\13\1\34"+
    "\1\302\1\303\2\1\1\13\1\74\1\162\5\1\1\304\1\305\1\51\2\13\1\157\1\1\1\122"+
    "\1\100\1\60\1\61\1\75\1\1\1\306\1\65\11\1\3\13\1\161\1\307\1\122\2\1\3\13"+
    "\1\1\1\310\1\122\12\1\2\13\1\157\2\1\1\311\2\1\3\13\1\1\1\312\1\122\2\1\2"+
    "\13\1\33\1\1\1\122\3\1\1\13\1\104\1\1\1\122\26\1\4\13\1\122\1\134\34\1\3\13"+
    "\1\51\20\1\1\61\1\13\1\157\1\1\1\76\1\122\1\1\1\244\1\13\67\1\71\13\1\104"+
    "\16\1\14\13\1\153\53\1\2\13\1\157\75\1\44\13\1\120\33\1\43\13\1\51\1\13\1"+
    "\157\1\122\6\1\1\13\1\160\1\1\3\13\1\1\1\153\1\122\1\165\1\313\1\13\67\1\4"+
    "\13\1\161\1\76\3\1\1\165\4\1\1\76\1\1\76\13\1\132\1\1\57\13\1\34\20\1\1\65"+
    "\77\1\6\13\1\33\1\132\1\51\1\104\66\1\5\13\1\250\3\13\1\152\1\314\1\315\1"+
    "\316\1\317\2\13\1\320\1\321\1\13\1\322\1\323\1\41\24\13\1\324\1\13\1\41\1"+
    "\142\1\13\1\142\1\13\1\250\1\13\1\250\1\157\1\13\1\157\1\13\1\61\1\13\1\61"+
    "\1\13\1\325\3\326\14\13\1\161\3\1\4\13\1\153\1\122\112\1\1\316\1\13\1\327"+
    "\1\330\1\331\1\332\1\333\1\334\1\335\1\162\1\336\1\162\24\1\55\13\1\120\2"+
    "\1\103\13\1\161\15\13\1\160\150\13\1\65\25\1\41\13\1\160\36\1");

  /* The ZZ_CMAP_A table has 3568 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\16\1\0\1\24\3\0\1\22\1\26\1\27\1\6\1"+
    "\16\1\34\1\16\1\25\1\5\1\12\11\11\1\31\1\33\1\17\1\20\1\17\2\0\2\7\1\53\1"+
    "\63\4\7\1\74\6\7\1\77\12\7\1\42\1\23\1\43\1\0\1\7\1\0\1\55\1\60\1\76\1\67"+
    "\1\62\1\64\1\7\1\54\1\56\2\7\1\61\1\73\1\57\1\66\1\75\1\7\1\72\1\71\1\65\1"+
    "\100\1\21\1\7\1\70\2\7\1\44\1\46\1\45\1\16\6\0\1\1\24\0\1\7\1\0\1\13\10\0"+
    "\1\7\4\0\1\7\5\0\27\7\1\13\17\7\1\0\12\7\4\0\12\7\1\32\1\7\16\0\5\7\7\0\1"+
    "\7\1\0\1\7\1\0\5\14\1\13\2\14\2\13\4\14\1\13\1\14\6\13\1\14\1\13\3\14\1\13"+
    "\1\14\1\13\24\14\1\13\30\14\1\51\12\14\1\13\11\14\2\7\10\0\6\7\1\0\26\7\2"+
    "\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\10\4\0\6\7\1\0\1\7\17\0\2\7\7\0"+
    "\2\7\12\10\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\10\6\7\4\0\2\7"+
    "\4\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\1\0\10\7\6\0\26"+
    "\7\3\0\1\7\2\0\1\7\7\0\12\7\4\0\12\10\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7"+
    "\7\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7\23\0\6\7\4\0\2\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\10\2\0\3\7\20\0\11\7\1\0\3\7"+
    "\1\0\16\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1"+
    "\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14"+
    "\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0\1\7\4\0\10\7\1\0\6\7\1\0\5\7\3\0\1\7\3\0"+
    "\2\7\15\0\13\7\2\0\1\7\6\0\3\7\10\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11"+
    "\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\10\7\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2"+
    "\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\10\2\0\14\7\1\0\24\7\13\0\5\7\22\0\7\7"+
    "\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7"+
    "\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6"+
    "\7\23\0\1\7\4\0\1\7\3\0\5\7\2\0\22\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\5\7\13"+
    "\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\10\3\0\3\7\11\0\4\7\1\0\4\7"+
    "\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7"+
    "\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2\1\10\0\1\30\16\0\1\7\15\0\1\7\2\0\1\14\4\0"+
    "\1\7\2\0\12\7\1\0\1\14\2\0\1\13\1\7\1\14\2\7\1\14\6\0\1\14\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\14\0\1\13\1\0\1\13\1\0\1"+
    "\13\23\0\2\13\21\0\10\13\14\0\1\50\2\0\1\47\4\0\2\13\5\0\1\15\1\0\1\15\6\0"+
    "\2\13\3\0\1\13\7\0\1\35\1\0\4\13\15\0\1\13\3\0\1\13\6\0\1\13\4\0\1\13\7\0"+
    "\1\13\13\0\1\52\3\0\2\13\2\0\2\13\4\0\2\13\6\0\2\13\10\0\2\13\4\0\2\13\2\0"+
    "\2\13\6\0\1\13\6\0\3\13\1\0\1\13\10\0\4\13\12\0\4\15\2\0\1\13\1\0\3\13\15"+
    "\0\1\40\1\41\16\0\1\36\1\37\13\0\6\13\5\0\3\15\1\0\1\15\13\0\5\7\6\0\4\7\3"+
    "\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7"+
    "\12\10\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0"+
    "\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\10\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3"+
    "\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2"+
    "\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1"+
    "\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7"+
    "\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1"+
    "\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13"+
    "\0\12\10\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\7\0"+
    "\4\7\11\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7"+
    "\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\32\7\1\14\6\7\1\0\4\7\2\0\10\7\1\0\7"+
    "\7\1\0\13\7\1\14\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22"+
    "\10\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1"+
    "\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7"+
    "\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\4\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\7\5\1\40\1\41\2\0\1\42\1\43"+
    "\1\44\1\45\10\5\1\41\1\46\1\1\1\47\1\5"+
    "\1\50\1\5\1\51\4\5\1\41\1\0\3\5\1\52"+
    "\2\5\1\53\11\5\1\54\1\5\1\55\4\5\1\56"+
    "\1\57\1\5\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\202\0\303\0\101\0\u0104"+
    "\0\u0145\0\101\0\101\0\u0104\0\101\0\u0186\0\u01c7\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0208\0\u0104\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\u0249"+
    "\0\u028a\0\101\0\101\0\101\0\u0104\0\101\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\101\0\101\0\101\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\101\0\u0514"+
    "\0\101\0\u0820\0\u0104\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\101\0\u07df\0\u09e7\0\u0a28\0\u0a69\0\u0104\0\u0aaa"+
    "\0\u0aeb\0\u0104\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0104\0\u0d75\0\u0104\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0104\0\u0104\0\u0eba\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\7"+
    "\1\10\1\17\1\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\6\10\1\50\1\51\1\52\7\10"+
    "\1\53\2\10\1\54\1\55\102\0\2\3\1\0\1\3"+
    "\101\0\1\56\1\57\11\0\1\7\67\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\26\10\11\0\2\11\106\0\1\7\60\0\23\60\1\61"+
    "\55\60\20\0\1\62\10\0\1\63\113\0\1\64\101\0"+
    "\1\65\42\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\1\10\1\66\24\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\4\10\1\67\10\10\1\70\10\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\7\10\1\71\16\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\17\10\1\72\6\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\20\10\1\73"+
    "\5\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\17\10\1\74\6\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\16\10\1\75\7\10\2\56\1\0\76\56"+
    "\6\57\1\76\72\57\22\0\1\77\77\0\1\60\1\100"+
    "\1\60\31\0\1\60\1\0\2\60\3\0\2\60\4\0"+
    "\1\60\37\0\1\101\56\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\2\10\1\102"+
    "\23\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\14\10\1\103\11\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\12\10\1\104\13\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\11\10\1\105\14\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\13\10\1\106"+
    "\12\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\22\10\1\107\3\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\7\10\1\110\16\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\7\10\1\111\16\10\5\57\1\112\1\113\72\57\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\3\10\1\114\22\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\7\10\1\115\16\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\3\10\1\116"+
    "\22\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\20\10\1\117\5\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\6\10\1\120\17\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\23\10\1\121\2\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\16\10\1\122"+
    "\7\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\4\10\1\123\21\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\4\10\1\124\21\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\4\10\1\125\21\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\3\10\1\126"+
    "\22\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\3\10\1\127\22\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\2\10\1\130\23\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\14\10\1\131\11\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\3\10\1\132"+
    "\22\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\23\10\1\133\2\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\16\10\1\134\7\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\5\10\1\135\20\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\16\10\1\136"+
    "\7\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\12\10\1\137\13\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\3\10\1\140\22\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\6\10\1\141\17\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\3\10\1\142"+
    "\22\10\7\0\4\10\1\0\1\10\4\0\1\10\10\0"+
    "\1\10\16\0\1\10\1\0\12\10\1\143\13\10\7\0"+
    "\4\10\1\0\1\10\4\0\1\10\10\0\1\10\16\0"+
    "\1\10\1\0\7\10\1\144\16\10\7\0\4\10\1\0"+
    "\1\10\4\0\1\10\10\0\1\10\16\0\1\10\1\0"+
    "\13\10\1\145\12\10\7\0\4\10\1\0\1\10\4\0"+
    "\1\10\10\0\1\10\16\0\1\10\1\0\4\10\1\146"+
    "\21\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3835];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\2\1\5\11\2\1\11\11\2\1\3\11"+
    "\1\1\1\11\11\1\2\0\1\1\3\11\11\1\1\11"+
    "\1\1\1\11\10\1\1\11\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return SYMBOL;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return INT;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return MATHSYMBOL;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return BIGOPERATOR
            } 
            // fall through
          case 55: break;
          case 9: 
            { return POUND;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return DOT;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return LPAREN;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return RPAREN;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return PRIME;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return TRICOLON;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return SEMICOLON;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return DBL_BAR;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return LANGLE;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return RANGLE;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return LCEIL;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return RCEIL;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return LBRACK;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return RBRACK;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return LBRACE;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return RBRACE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return BAR;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return EXISTS;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return FORALL;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return LAMBDA;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return TRI_EQUALS;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return COLON_EQUALS;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return COLON_COLON;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return DBL_LBRACE;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return DBL_RBRACE;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return CHAR;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return COLON_EQUALS_COLON;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return END;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return DEFINITION;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return FROM;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return USES;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return PRECIS;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return EXTENDS;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return IMPLICIT;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return CHAINABLE;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
