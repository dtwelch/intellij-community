/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.resolve.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.resolve.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.jetbrains.resolve.ResolveParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14528 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\35\1\36\1\37\2\23\1\15\1\40\14\23\1\41\1\42\20\23\1\43\10\23\1"+
    "\44\4\23\1\45\1\46\4\23\51\15\1\47\3\15\1\50\1\51\17\23\1\52\u0381\23");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\15\34"+
    "\13\1\16\1\17\1\20\10\1\1\21\1\22\1\23\1\24\1\25\1\26\2\13\1\27\10\13\1\30"+
    "\11\13\1\31\1\32\1\13\1\33\1\32\1\13\1\34\4\1\1\13\1\35\1\36\1\37\1\1\2\13"+
    "\1\35\1\1\1\40\1\32\5\13\1\41\1\42\1\43\1\1\1\44\1\13\1\1\1\45\5\13\1\46\1"+
    "\47\1\50\1\13\1\35\1\51\1\13\1\52\1\53\1\1\1\13\1\54\4\1\1\55\5\1\1\56\2\13"+
    "\1\57\1\1\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\61\1\71\1\72\1\64"+
    "\1\65\1\73\1\1\1\74\1\75\1\76\1\77\1\100\1\65\1\101\1\1\1\102\1\61\1\47\1"+
    "\63\1\64\1\65\1\101\1\1\1\70\1\61\1\47\1\103\1\104\1\105\1\106\1\1\1\102\1"+
    "\75\1\107\1\110\1\44\1\65\1\111\1\1\1\112\1\61\1\1\1\110\1\44\1\65\1\111\1"+
    "\1\1\67\1\61\1\113\1\110\1\44\1\13\1\114\1\67\1\1\1\61\1\115\1\116\1\117\1"+
    "\13\1\120\1\121\1\1\1\75\1\1\1\32\2\13\1\122\1\121\1\123\2\1\1\124\1\125\1"+
    "\126\1\127\1\130\1\131\2\1\1\102\1\1\1\123\1\1\1\132\1\13\1\133\1\1\1\134"+
    "\7\1\2\13\1\35\1\135\1\123\1\136\1\137\1\140\1\141\1\123\2\13\1\142\2\13\1"+
    "\143\24\13\1\144\1\145\2\13\1\144\2\13\1\146\1\147\1\15\3\13\1\147\3\13\1"+
    "\35\2\1\1\13\1\1\5\13\1\150\1\32\45\13\1\151\1\13\1\32\1\35\4\13\1\152\1\102"+
    "\1\153\1\17\1\13\1\17\1\13\1\17\1\153\1\102\3\13\1\154\1\1\1\155\1\123\2\1"+
    "\1\123\5\13\1\31\2\13\1\156\4\13\1\46\1\13\1\133\2\1\1\75\1\13\1\157\1\150"+
    "\2\13\1\160\1\1\1\161\1\123\2\1\1\13\1\121\3\13\1\150\2\1\2\123\1\162\5\1"+
    "\1\116\2\13\1\154\1\163\1\123\2\1\1\164\1\13\1\165\1\50\2\13\1\46\1\1\2\13"+
    "\1\154\1\1\1\166\1\50\1\13\1\157\6\1\1\167\1\170\14\13\4\1\21\13\1\171\2\13"+
    "\1\171\1\172\1\13\1\157\3\13\1\173\1\174\1\175\1\133\1\174\2\1\1\176\1\135"+
    "\1\102\1\177\1\1\1\200\1\1\1\133\1\13\1\35\4\1\1\201\1\202\1\203\1\204\1\205"+
    "\1\1\2\13\1\54\1\206\1\207\1\210\1\211\1\206\2\1\1\212\1\213\1\214\1\215\1"+
    "\216\1\217\1\220\1\221\1\222\1\223\1\1\1\224\1\225\3\1\1\226\115\1\1\227\1"+
    "\230\40\1\1\231\37\1\2\13\1\232\2\13\1\232\10\13\1\233\1\234\2\13\1\142\3"+
    "\13\1\34\1\1\1\13\1\121\4\235\4\1\1\135\35\1\1\236\1\1\1\237\1\240\1\32\4"+
    "\13\1\241\1\32\4\13\1\143\1\116\1\13\1\157\1\32\4\13\1\232\1\1\1\13\1\35\3"+
    "\1\1\13\40\1\133\13\1\46\4\1\134\13\1\133\3\1\10\13\1\133\4\1\2\13\1\157\20"+
    "\13\1\133\1\13\1\242\1\1\2\13\1\232\1\135\1\13\1\31\5\13\2\1\1\243\1\244\5"+
    "\13\1\245\1\154\1\35\4\1\1\246\1\247\1\13\1\36\1\250\3\13\1\154\1\244\2\13"+
    "\1\154\1\1\1\123\1\1\1\251\1\50\1\13\1\46\1\13\1\121\1\1\1\13\1\133\1\56\2"+
    "\13\1\36\1\135\1\123\1\1\1\123\2\13\1\54\1\1\1\252\1\123\1\13\1\253\3\13\1"+
    "\254\1\255\1\256\1\35\1\76\1\257\1\260\1\235\11\1\2\13\1\36\1\123\72\13\1"+
    "\154\1\13\1\261\2\13\1\160\120\1\26\13\1\157\6\13\1\106\2\1\1\121\1\262\1"+
    "\65\1\263\1\264\6\13\1\17\1\1\1\164\25\13\1\157\1\1\4\13\1\244\2\13\1\31\2"+
    "\1\1\133\3\1\1\265\1\45\1\1\1\107\1\266\7\13\1\133\1\177\1\123\1\32\1\267"+
    "\1\32\1\35\1\270\4\13\1\232\1\271\1\272\1\170\1\1\1\273\1\13\1\15\1\274\2"+
    "\157\2\1\7\13\1\35\4\1\3\13\1\150\20\1\1\13\1\133\3\13\1\102\2\1\1\13\1\232"+
    "\1\1\1\13\1\35\3\1\1\13\1\157\2\13\1\275\1\276\2\1\11\13\1\157\1\123\65\1"+
    "\1\277\2\13\1\300\1\13\1\46\12\1\1\13\1\46\1\13\1\106\4\1\3\13\1\301\4\1\1"+
    "\102\1\302\1\13\1\154\2\1\1\13\1\133\10\1\3\13\1\46\1\13\1\46\1\13\1\36\10"+
    "\1\4\13\1\54\73\1\1\164\2\13\1\31\2\1\1\75\1\1\1\164\2\13\2\1\1\13\1\54\1"+
    "\123\1\164\1\13\1\121\1\75\4\1\1\164\2\13\1\36\1\303\1\123\21\1\1\123\25\1"+
    "\1\123\7\1\1\123\27\1\1\123\2\1\2\13\1\35\1\1\1\123\6\1\1\123\32\1\1\123\66"+
    "\1\1\123\72\1\66\13\1\232\11\1\6\13\1\36\71\1\2\13\1\232\75\1\43\13\1\54\2"+
    "\1\1\123\16\1\1\123\72\1\4\13\1\150\1\102\3\1\1\164\6\1\1\17\77\1\5\13\1\266"+
    "\3\13\1\153\1\304\1\305\1\306\3\13\1\307\1\310\1\13\1\311\1\312\1\44\24\13"+
    "\1\313\1\13\1\44\1\143\1\13\1\143\1\13\1\266\1\13\1\266\1\232\1\13\1\232\1"+
    "\13\1\65\1\13\1\65\1\13\1\314\3\315\25\1\1\123\112\1\1\306\1\13\1\316\1\317"+
    "\1\320\1\321\1\322\1\323\1\324\1\160\1\325\1\160\24\1\55\13\1\121\2\1\103"+
    "\13\1\150\15\13\1\157\76\1\41\13\1\157\36\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\16\1\23\1\31\1\7\2\0\1\30\1\33\1\34\1"+
    "\6\1\16\1\37\1\17\1\32\1\5\1\13\10\26\1\12\1\35\1\36\1\20\1\22\1\21\2\0\2"+
    "\7\1\100\1\105\1\106\1\111\1\112\1\7\1\113\2\7\1\115\2\7\1\117\1\101\1\7\1"+
    "\116\1\7\1\121\1\25\1\122\1\123\3\7\1\46\1\24\1\47\1\0\1\10\1\0\1\60\1\76"+
    "\1\102\1\67\1\62\1\55\1\71\1\103\1\40\2\7\1\61\1\107\1\66\1\56\1\104\1\70"+
    "\1\57\1\64\1\65\1\110\1\27\1\120\1\63\1\77\1\114\1\51\1\50\1\52\1\17\6\0\1"+
    "\1\14\0\4\7\4\0\1\7\1\0\1\14\10\0\1\7\4\0\1\7\5\0\27\7\1\14\17\7\1\0\12\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3"+
    "\7\1\0\1\7\1\0\5\7\2\15\3\7\1\15\2\7\1\15\2\7\1\15\3\7\1\0\1\15\2\7\1\15\1"+
    "\7\2\15\7\7\31\15\14\7\1\0\13\7\10\0\16\7\11\0\26\7\2\0\1\7\6\0\10\7\7\0\14"+
    "\7\5\0\3\7\30\0\1\7\4\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\11\3\7\2"+
    "\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4\0\1\7\5\0\6\7"+
    "\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\1\7\1\0\13\7\7\0\26\7\3\0\1\7\2\0\1"+
    "\7\7\0\12\7\4\0\12\11\1\0\7\7\1\0\7\7\5\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1"+
    "\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\5\7\7\0\1\7\11\0\6\7\4\0\2\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0"+
    "\3\7\1\0\16\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\22\0\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\17\0\1\7\13\0\10\7\1"+
    "\0\6\7\1\0\5\7\3\0\1\7\12\0\2\7\7\0\2\7\15\0\13\7\2\0\1\7\14\0\6\7\5\0\22"+
    "\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\13\0\1\7\12\11\7\0\2"+
    "\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0\14\7\1\0"+
    "\24\7\13\0\5\7\22\0\7\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7"+
    "\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\15\7\13\0\15\7\2\0\14\7\3\0\17"+
    "\7\1\0\6\7\23\0\1\7\3\0\2\7\3\0\11\7\1\0\1\7\5\0\16\7\2\0\14\7\5\0\7\7\17"+
    "\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11"+
    "\0\6\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3"+
    "\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2\1\12\0\1\7\14\0\1\7\15\0\1\7\2\0\1\15"+
    "\4\0\1\7\2\0\12\7\1\0\1\15\2\0\1\14\1\7\1\15\2\7\1\15\6\0\1\15\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\2\0\1\14\1\0\1\14\1\0\1\14\23"+
    "\0\2\14\21\0\10\14\14\0\1\54\2\0\1\53\1\0\1\14\2\0\2\14\5\0\1\14\1\0\1\14"+
    "\6\0\2\14\3\0\1\14\7\0\1\41\1\0\1\74\1\75\2\14\15\0\1\14\3\0\1\14\6\0\1\14"+
    "\4\0\1\14\7\0\1\14\13\0\1\72\3\0\1\73\1\14\2\0\2\14\4\0\2\14\6\0\2\14\10\0"+
    "\2\14\4\0\2\14\2\0\2\14\6\0\1\14\6\0\3\14\1\0\1\14\10\0\4\14\12\0\4\14\2\0"+
    "\1\14\1\0\3\14\15\0\1\44\1\45\16\0\1\42\1\43\13\0\6\14\5\0\3\14\1\0\1\14\13"+
    "\0\17\7\1\0\5\7\6\0\4\7\3\0\2\7\14\0\7\7\1\0\7\7\6\0\3\7\11\0\11\7\7\0\5\7"+
    "\2\0\5\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\4\7\11\0\12\7\1"+
    "\0\3\7\1\0\4\7\1\0\4\7\10\0\1\7\11\0\6\7\3\0\1\7\4\0\3\7\1\0\10\7\4\0\7\7"+
    "\3\0\1\7\6\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\12\7\3\0\2\7\13\0\5\7\1\0\25\7\4\0\1\7\6\0\12\7\2\0\6\7\2\0\6"+
    "\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\5\7\4\0\10\7\1\0\5\7\12\0"+
    "\6\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\11\7\6\0\6\7\1\0\3\7\1\0\7\7\1\0"+
    "\4\7\15\0\1\7\2\0\2\7\2\0\2\7\1\15\1\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1"+
    "\0\4\7\2\0\10\7\1\0\7\7\1\0\13\7\1\15\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0"+
    "\13\7\1\0\10\7\2\0\22\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7"+
    "\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1"+
    "\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0"+
    "\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\2\4\1\10\1\11\2\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\5\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\7\5\1\35\1\36\1\37\1\40\23\5\1\41\1\42"+
    "\1\0\1\11\6\43\3\0\1\44\1\45\1\46\1\47"+
    "\1\5\1\50\3\5\1\51\12\5\1\52\1\5\1\53"+
    "\17\5\1\54\13\5\1\42\1\43\1\40\3\43\1\55"+
    "\1\1\2\0\1\56\1\57\1\5\1\60\16\5\1\61"+
    "\21\5\1\62\21\5\1\63\2\5\1\42\1\0\1\43"+
    "\1\37\1\43\1\36\1\64\1\0\1\5\1\65\11\5"+
    "\1\66\4\5\1\67\1\70\1\71\22\5\1\72\12\5"+
    "\1\73\1\5\1\74\3\5\2\43\1\75\1\5\1\76"+
    "\55\5\1\77\2\43\1\5\1\100\5\5\1\101\15\5"+
    "\1\102\3\5\1\103\15\5\1\104\5\5\1\105\1\106"+
    "\1\107\11\5\1\110\1\111\3\5\1\112\1\113\12\5"+
    "\1\114\1\5\1\115\1\5\1\116\2\5\1\117\5\5"+
    "\1\120\2\5\1\121\1\122\1\123\1\124\1\5\1\125"+
    "\1\5\1\126\10\5\1\127\4\5\1\130\1\5\1\131"+
    "\6\5\1\132\1\133\2\5\1\134\1\135\1\5\1\136"+
    "\3\5\1\137\3\5\1\140\2\5\1\141\1\142\2\5"+
    "\1\143\1\144\4\5\1\62\6\5\1\145\1\5\1\146"+
    "\1\147\1\150\1\151\1\152\1\153\6\5\1\154\1\155"+
    "\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\124\0\250\0\374\0\124\0\u0150"+
    "\0\u01a4\0\124\0\124\0\u0150\0\u01f8\0\u024c\0\u01f8\0\u02a0"+
    "\0\u02f4\0\u0348\0\124\0\124\0\u039c\0\124\0\u03f0\0\124"+
    "\0\124\0\u0444\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\u0498\0\124\0\124\0\124\0\124\0\u04ec\0\u0540"+
    "\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4\0\124\0\124\0\124"+
    "\0\124\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930"+
    "\0\u0984\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0"+
    "\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\124"+
    "\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc"+
    "\0\u1110\0\u1164\0\u11b8\0\u0150\0\u0150\0\u120c\0\124\0\u1260"+
    "\0\u12b4\0\u1308\0\u0150\0\u135c\0\u13b0\0\u1404\0\u1458\0\u14ac"+
    "\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u1650\0\u0150\0\u16a4\0\u0150"+
    "\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944"+
    "\0\u1998\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u0150"+
    "\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30"+
    "\0\u1e84\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4\0\u0e70\0\u2028\0\u207c"+
    "\0\u20d0\0\124\0\u1068\0\u2124\0\u2178\0\124\0\124\0\u21cc"+
    "\0\u0150\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u2418"+
    "\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664\0\u0150"+
    "\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c\0\u28b0\0\u2904"+
    "\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4"+
    "\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44"+
    "\0\u2e98\0\u2eec\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4"+
    "\0\u3138\0\u318c\0\u31e0\0\u0150\0\u3234\0\u3288\0\124\0\u1f80"+
    "\0\u32dc\0\u0e70\0\u3330\0\u0e70\0\124\0\u3384\0\u33d8\0\u0150"+
    "\0\u342c\0\u3480\0\u34d4\0\u3528\0\u357c\0\u35d0\0\u3624\0\u3678"+
    "\0\u36cc\0\u0150\0\u3720\0\u3774\0\u37c8\0\u381c\0\u0150\0\u0150"+
    "\0\u0150\0\u3870\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u3a68"+
    "\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08"+
    "\0\u3d5c\0\u3db0\0\u3e04\0\u0150\0\u3e58\0\u3eac\0\u3f00\0\u3f54"+
    "\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8\0\u414c\0\u0150\0\u41a0"+
    "\0\u0150\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\124\0\u4398"+
    "\0\u0150\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884"+
    "\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24"+
    "\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\u5064"+
    "\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c\0\u0150\0\u52b0"+
    "\0\u5304\0\u5358\0\u0150\0\u53ac\0\u5400\0\u5454\0\u54a8\0\u54fc"+
    "\0\u0150\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748"+
    "\0\u579c\0\u57f0\0\u5844\0\u5898\0\u58ec\0\u5940\0\u0150\0\u5994"+
    "\0\u59e8\0\u5a3c\0\u0150\0\u5a90\0\u5ae4\0\u5b38\0\u5b8c\0\u5be0"+
    "\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c\0\u5e80"+
    "\0\u0150\0\u5ed4\0\u5f28\0\u5f7c\0\u5fd0\0\u6024\0\u0150\0\u0e70"+
    "\0\u0e70\0\u6078\0\u60cc\0\u6120\0\u6174\0\u61c8\0\u621c\0\u6270"+
    "\0\u62c4\0\u6318\0\u0150\0\u0150\0\u636c\0\u63c0\0\u6414\0\u0150"+
    "\0\u0150\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c\0\u6660"+
    "\0\u66b4\0\u6708\0\u675c\0\u0150\0\u67b0\0\u0150\0\u6804\0\u0150"+
    "\0\u6858\0\u68ac\0\u0150\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50"+
    "\0\u0150\0\u6aa4\0\u6af8\0\u0150\0\u0150\0\u0150\0\u0150\0\u6b4c"+
    "\0\u0150\0\u6ba0\0\u0150\0\u6bf4\0\u6c48\0\u6c9c\0\u6cf0\0\u6d44"+
    "\0\u6d98\0\u6dec\0\u6e40\0\u0150\0\u6e94\0\u6ee8\0\u6f3c\0\u6f90"+
    "\0\u0150\0\u6fe4\0\u0150\0\u7038\0\u708c\0\u70e0\0\u7134\0\u7188"+
    "\0\u71dc\0\u0150\0\u0150\0\u7230\0\u7284\0\u0150\0\u0150\0\u72d8"+
    "\0\u0150\0\u732c\0\u7380\0\u73d4\0\u0150\0\u7428\0\u747c\0\u74d0"+
    "\0\u0150\0\u7524\0\u7578\0\u0150\0\u0150\0\u75cc\0\u7620\0\u0150"+
    "\0\u0150\0\u7674\0\u76c8\0\u771c\0\u7770\0\u0150\0\u77c4\0\u7818"+
    "\0\u786c\0\u78c0\0\u7914\0\u7968\0\u0150\0\u79bc\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u7a10\0\u7a64\0\u7ab8\0\u7b0c"+
    "\0\u7b60\0\u7bb4\0\u0150\0\u0150\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\2\16\1\17"+
    "\1\20\1\21\1\10\1\11\1\10\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\10\1\53"+
    "\2\10\1\54\1\10\1\55\2\10\1\56\1\57\1\60"+
    "\1\61\1\62\1\10\1\63\1\64\1\65\1\10\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\10"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\125\0"+
    "\2\3\1\0\1\3\124\0\1\105\1\106\13\0\1\57"+
    "\110\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\26\10\12\0\2\11\12\0\1\11"+
    "\116\0\1\7\124\0\1\7\101\0\2\107\1\0\20\107"+
    "\1\110\1\0\77\107\7\0\2\111\4\0\1\111\7\0"+
    "\1\111\1\0\1\111\10\0\1\111\14\0\1\112\1\113"+
    "\1\111\1\114\1\111\1\115\3\111\1\116\3\111\4\0"+
    "\26\111\24\117\1\120\77\117\40\0\1\121\105\0\1\122"+
    "\12\0\1\123\75\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\1\124\6\10\1\125\1\10\1\126"+
    "\3\10\4\0\26\10\51\0\1\127\61\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\1\10\1\130"+
    "\1\131\1\132\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\1\133\7\10"+
    "\1\134\4\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\135\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\4\10\1\136\10\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\2\10\1\137\10\0"+
    "\1\10\14\0\4\10\1\140\1\10\1\141\2\10\1\142"+
    "\3\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\143\12\10\4\0"+
    "\1\10\1\144\3\10\1\145\20\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\1\10\1\146"+
    "\3\10\1\147\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\1\10\1\150\24\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\1\10\1\151\1\10\1\152"+
    "\11\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\153\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\10\1\154\2\10\1\155\10\10\4\0"+
    "\5\10\1\156\20\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\157\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\160\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\11\10\1\161\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\1\10\1\162"+
    "\1\10\1\163\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\7\10\1\164"+
    "\5\10\4\0\6\10\1\165\17\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\3\10\1\166"+
    "\11\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\5\10\1\167\7\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\170\10\10\1\171\3\10\4\0\11\10"+
    "\1\172\14\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\173\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\5\10"+
    "\1\174\7\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\6\10"+
    "\1\175\17\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\176\14\0\15\10\4\0\5\10\1\177\20\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\1\10\1\200\3\10\1\201\20\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\3\10\1\202\11\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\5\10\1\203\20\10\2\105\1\0\121\105\6\106"+
    "\1\204\115\106\13\0\1\20\7\0\1\20\1\0\3\20"+
    "\25\0\1\20\1\0\2\20\2\0\1\20\1\0\2\20"+
    "\7\0\1\20\11\0\1\20\22\0\5\111\1\0\1\111"+
    "\7\0\3\111\10\0\1\111\14\0\15\111\4\0\26\111"+
    "\7\0\5\111\1\0\1\111\7\0\3\111\10\0\1\111"+
    "\14\0\1\111\1\205\13\111\4\0\26\111\7\0\5\111"+
    "\1\0\1\111\7\0\3\111\10\0\1\111\14\0\2\111"+
    "\1\206\12\111\4\0\26\111\7\0\5\111\1\0\1\111"+
    "\7\0\3\111\10\0\1\111\14\0\11\111\1\207\3\111"+
    "\4\0\26\111\7\0\5\111\1\0\1\111\7\0\3\111"+
    "\10\0\1\111\14\0\6\111\1\210\6\111\4\0\26\111"+
    "\7\0\5\111\1\0\1\111\7\0\3\111\10\0\1\111"+
    "\14\0\5\111\1\211\7\111\4\0\26\111\30\0\1\212"+
    "\117\0\1\117\2\0\1\117\1\213\24\0\1\117\1\0"+
    "\2\117\4\0\2\117\7\0\1\117\57\0\1\214\5\0"+
    "\1\215\120\0\1\216\123\0\1\217\75\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\220\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\2\10\1\221\12\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\1\10\1\222\13\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\4\10\1\223"+
    "\10\10\4\0\11\10\1\224\14\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\5\10\1\225\20\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\3\10\1\226\3\10\1\227"+
    "\3\10\1\230\1\10\4\0\6\10\1\231\17\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\10\10\1\232\4\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\3\10\1\233"+
    "\11\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\7\10\1\234\5\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\235\2\10\1\236\4\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\7\10\1\237\2\10\1\240\2\10\4\0"+
    "\5\10\1\241\20\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\15\10\4\0\12\10\1\242"+
    "\13\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\15\10\4\0\6\10\1\243\17\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\5\10\1\244\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\4\10\1\245\21\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\246\2\10\1\247"+
    "\3\10\1\250\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\2\10\1\251"+
    "\5\10\1\252\4\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\1\10\1\253"+
    "\3\10\1\254\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\2\10\1\255"+
    "\6\10\1\256\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\5\10\1\257"+
    "\7\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\3\10\1\260\11\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\261\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\1\262\14\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\5\10"+
    "\1\263\20\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\12\10\1\264\2\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\265"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\266\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\12\10\1\267\2\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\4\10\1\270\21\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\271\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\12\10\1\272\2\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\6\10\1\273\17\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\10\10\1\274\4\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\3\10"+
    "\1\275\11\10\4\0\4\10\1\276\21\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\5\10"+
    "\1\277\7\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\10\10\1\300\4\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\301\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\6\10\1\302\17\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\303\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\2\10\1\304\1\10\1\305\10\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\306\14\0\15\10\4\0\26\10\5\106\1\307"+
    "\1\310\115\106\7\0\5\111\1\0\1\111\7\0\3\111"+
    "\10\0\1\111\14\0\2\111\1\311\12\111\4\0\26\111"+
    "\7\0\5\111\1\0\1\111\7\0\3\111\10\0\1\111"+
    "\14\0\12\111\1\312\2\111\4\0\26\111\7\0\5\111"+
    "\1\0\1\111\7\0\3\111\10\0\1\313\14\0\15\111"+
    "\4\0\26\111\7\0\5\111\1\0\1\111\7\0\3\111"+
    "\10\0\1\111\14\0\13\111\1\314\1\111\4\0\26\111"+
    "\34\0\1\315\121\0\1\316\100\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\10\10\1\317\4\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\11\10\1\320\14\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\7\10\1\321\5\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\322\14\0\15\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\323\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\4\10\1\324\10\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\10\10"+
    "\1\325\4\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\12\10"+
    "\1\326\13\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\4\10\1\327\10\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\330\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\4\10"+
    "\1\331\10\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\332\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\11\10\1\333\14\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\334\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\12\10\1\335\13\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\3\10\1\336\11\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\337\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\340\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\341\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\342\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\1\10\1\343\13\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\2\10\1\344\12\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\4\10\1\345\21\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\10\10\1\346\4\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\347\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\4\10\1\350\21\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\4\10\1\351\21\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\352\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\2\10"+
    "\1\353\10\0\1\10\14\0\7\10\1\354\5\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\3\10\1\355\11\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\11\10\1\356\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\7\10\1\357"+
    "\5\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\360\14\0\15\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\3\10\1\361\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\5\10\1\362"+
    "\7\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\11\10\1\363\3\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\7\10\1\364\5\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\3\10\1\365\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\366\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\367\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\15\10\4\0\12\10\1\370\13\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\4\10\1\371"+
    "\10\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\5\10\1\372\7\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\4\10\1\373\10\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\1\10\1\374\13\10\4\0\12\10\1\375\13\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\2\10\1\376\12\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\5\10\1\377\20\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\15\10\4\0\4\10\1\u0100"+
    "\21\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\u0101\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\1\10\1\u0102\13\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\12\10\1\u0103\13\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\4\10\1\u0104\10\10\4\0"+
    "\26\10\7\0\5\111\1\0\1\111\7\0\3\111\10\0"+
    "\1\111\14\0\3\111\1\u0105\11\111\4\0\26\111\7\0"+
    "\5\111\1\0\1\111\7\0\3\111\10\0\1\111\14\0"+
    "\7\111\1\u0106\5\111\4\0\26\111\34\0\1\u0107\76\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u0108\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\5\10\1\u0109\7\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\4\10\1\u010a\10\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\2\10\1\u010b\12\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\u010c\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\10\1\u010d\13\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u010e\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\3\10\1\u010f\11\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\2\10\1\u0110\12\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\15\10\4\0\12\10\1\u0111\13\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\15\10\4\0"+
    "\6\10\1\u0112\17\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u0113\6\10\1\u0114"+
    "\3\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u0115\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\11\10\1\u0116\3\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\5\10\1\u0117\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\4\10\1\u0118"+
    "\10\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\15\10\4\0\4\10\1\u0119"+
    "\21\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\u011a\7\10\4\0\26\10\7\0"+
    "\1\10\1\u011b\3\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\15\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\14\10\1\u011c"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\u011d\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\u011e"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u011f\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\u0120\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\10\10\1\u0121\4\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\2\10"+
    "\1\u0122\12\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\14\10\1\u0123\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\u0124\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\11\10\1\u0125\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\11\10\1\u0126"+
    "\3\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\4\10\1\u0127\10\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\10\10\1\u0128\4\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\10\10\1\u0129\4\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\4\10\1\u012a"+
    "\10\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u012b\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\15\10\4\0\4\10\1\u012c\21\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u012d\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u012e\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\u012f\14\0\15\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\2\10\1\u0130"+
    "\11\10\1\u0131\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\u0132\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\3\10\1\u0133\11\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\5\10\1\u0134\20\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\2\10"+
    "\1\u0135\12\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u0136\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\u0137\7\10\4\0\26\10"+
    "\7\0\5\111\1\0\1\111\7\0\3\111\10\0\1\111"+
    "\14\0\4\111\1\u0138\10\111\4\0\26\111\7\0\5\111"+
    "\1\0\1\111\7\0\3\111\10\0\1\111\14\0\10\111"+
    "\1\u0139\4\111\4\0\26\111\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\3\10\1\u013a\11\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\1\10\1\u013b\24\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\22\10\1\u013c\3\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\16\10\1\u013d\7\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\u013e\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\2\10\1\u013f\12\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\4\10\1\u0140\21\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\7\10"+
    "\1\u0141\5\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\3\10\1\u0142\11\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\4\10\1\u0143\10\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\11\10\1\u0144\3\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\12\10"+
    "\1\u0145\2\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u0146\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\4\10\1\u0147\21\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\3\10\1\u0148\11\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\4\10"+
    "\1\u0149\10\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u014a\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\6\10\1\u014b\17\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\3\10\1\u014c\22\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\1\10"+
    "\1\u014d\13\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\12\10\1\u014e\2\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\7\10\1\u014f\5\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\7\10\1\u0150\5\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\u0151\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\u0152\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\7\10\1\u0153\5\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\u0154"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\2\10\1\u0155\12\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\u0156\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\4\10\1\u0157\21\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u0158\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\3\10\1\u0159\11\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\u015a\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\u015b\14\0\15\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\u015c\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\10\10"+
    "\1\u015d\4\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\4\10"+
    "\1\u015e\21\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\3\10\1\u015f\11\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\16\10\1\u0160\7\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\12\10"+
    "\1\u0161\2\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\11\10\1\u0162\3\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\7\10\1\u0163\5\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\10\10\1\u0164\4\10\4\0\26\10\7\0\1\10"+
    "\1\u0165\3\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u0166\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\12\10\1\u0167\2\10\4\0\26\10"+
    "\7\0\5\111\1\0\1\111\7\0\3\111\10\0\1\111"+
    "\14\0\4\111\1\u0168\10\111\4\0\26\111\7\0\5\111"+
    "\1\0\1\111\7\0\3\111\10\0\1\111\14\0\7\111"+
    "\1\u0169\5\111\4\0\26\111\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\4\10\1\u016a\10\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\u016b\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\5\10"+
    "\1\u016c\7\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u016d\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\5\10\1\u016e\7\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\u016f\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\10\10"+
    "\1\u0170\4\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\3\10\1\u0171\11\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\3\10\1\u0172\11\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\7\10\1\u0173\5\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\7\10"+
    "\1\u0174\5\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u0175\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\7\10\1\u0176\5\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\3\10\1\u0177\11\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\2\10"+
    "\1\u0178\12\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\10\10\1\u0179\4\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\2\10\1\u017a\12\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\2\10\1\u017b\12\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\12\10\1\u017c\13\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\6\10"+
    "\1\u017d\17\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\10\10\1\u017e\4\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\3\10\1\u017f\11\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\u0180\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\2\10\1\u0181\10\0\1\10\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\10\10\1\u0182\4\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\5\10\1\u0183\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\12\10\1\u0184"+
    "\2\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\u0185\14\0\15\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\7\10\1\u0186\5\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\10\10\1\u0187"+
    "\4\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\15\10\4\0\4\10\1\u0188"+
    "\21\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\u0189\14\0\15\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\u018a\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\4\10\1\u018b\10\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\3\10\1\u018c\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\u018d\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\u018e\14\0\15\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\u018f\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\5\10\1\u0190\7\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\15\10\4\0\11\10\1\u0191\14\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\u0192\14\0\15\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\7\10\1\u0193\5\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\12\10\1\u0194\2\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\7\10\1\u0195"+
    "\5\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\7\10\1\u0196\5\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\7\10\1\u0197\5\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\5\10\1\u0198\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\2\10\1\u0199"+
    "\12\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\4\10\1\u019a\10\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\12\10\1\u019b\2\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u019c\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u019d\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\10\1\u019e\13\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u019f\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\2\10\1\u01a0\12\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\10\1\u01a1\13\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\u01a2\14\0"+
    "\15\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\u01a3\14\0\15\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\14\10\1\u01a4\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u01a5\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\u01a6\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\11\10\1\u01a7\14\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\11\10\1\u01a8\3\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\1\10\1\u01a9\24\10"+
    "\7\0\5\10\1\0\1\10\7\0\2\10\1\u01aa\10\0"+
    "\1\10\14\0\15\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\10\10\1\u01ab"+
    "\4\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\10\10\1\u01ac\4\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\10\10\1\u01ad\4\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\2\10\1\u01ae\10\0\1\10"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\1\10\1\u01af\13\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\11\10\1\u01b0\3\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\15\10\4\0\16\10\1\u01b1\7\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\5\10"+
    "\1\u01b2\7\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\7\10\1\u01b3\5\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\4\10\1\u01b4\10\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\11\10\1\u01b5\3\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\15\10"+
    "\4\0\1\10\1\u01b6\24\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\12\10\1\u01b7\2\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\4\10\1\u01b8\21\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\5\10\1\u01b9\7\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\u01ba\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\1\10\1\u01bb\13\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\11\10\1\u01bc\3\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\7\10\1\u01bd\5\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\1\10"+
    "\1\u01be\13\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u01bf\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\u01c0\14\0\15\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\5\10"+
    "\1\u01c1\7\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\u01c2\14\0\15\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\u01c3"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u01c4\7\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\11\10\1\u01c5\3\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\10\10\1\u01c6\4\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\3\10"+
    "\1\u01c7\11\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\15\10\4\0\1\10"+
    "\1\u01c8\24\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\14\10\1\u01c9\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\3\10\1\u01ca\11\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\12\10\1\u01cb"+
    "\2\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\11\10\1\u01cc\3\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\10\10\1\u01cd\4\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\11\10\1\u01ce\3\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\11\10\1\u01cf"+
    "\3\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\11\10\1\u01d0\3\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\1\10\1\u01d1\13\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\1\10\1\u01d2\13\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\3\10\1\u01d3"+
    "\11\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\10\10\1\u01d4\4\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\4\10\1\u01d5\10\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\5\10\1\u01d6\7\10\4\0\26\10\7\0\5\10\1\0"+
    "\1\10\7\0\3\10\10\0\1\10\14\0\7\10\1\u01d7"+
    "\5\10\4\0\26\10\7\0\5\10\1\0\1\10\7\0"+
    "\3\10\10\0\1\10\14\0\7\10\1\u01d8\5\10\4\0"+
    "\26\10\7\0\5\10\1\0\1\10\7\0\3\10\10\0"+
    "\1\10\14\0\10\10\1\u01d9\4\10\4\0\26\10\7\0"+
    "\5\10\1\0\1\10\7\0\3\10\10\0\1\10\14\0"+
    "\14\10\1\u01da\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\11\10\1\u01db\3\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\11\10\1\u01dc\3\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\u01dd"+
    "\14\0\15\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\u01de\14\0\15\10\4\0\26\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\11\10\1\u01df\3\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\4\10"+
    "\1\u01e0\10\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\1\10\1\u01e1\13\10"+
    "\4\0\26\10\7\0\5\10\1\0\1\10\7\0\3\10"+
    "\10\0\1\10\14\0\15\10\4\0\4\10\1\u01e2\21\10"+
    "\7\0\5\10\1\0\1\10\7\0\3\10\10\0\1\10"+
    "\14\0\7\10\1\u01e3\5\10\4\0\26\10\7\0\5\10"+
    "\1\0\1\10\7\0\3\10\10\0\1\10\14\0\11\10"+
    "\1\u01e4\3\10\4\0\26\10\7\0\5\10\1\0\1\10"+
    "\7\0\3\10\10\0\1\10\14\0\5\10\1\u01e5\7\10"+
    "\4\0\26\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\7\1\2\11\1\1\1\11\1\1\2\11\1\1\7\11"+
    "\1\1\4\11\7\1\4\11\25\1\1\0\1\11\6\1"+
    "\3\0\5\1\1\11\62\1\1\11\1\1\2\0\2\11"+
    "\67\1\1\11\1\0\4\1\1\11\1\0\70\1\1\11"+
    "\336\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 111: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 112: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 113: break;
          case 4: 
            { return SYMBOL;
            } 
            // fall through
          case 114: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 115: break;
          case 6: 
            { return INT;
            } 
            // fall through
          case 116: break;
          case 7: 
            { return MATHSYMBOL;
            } 
            // fall through
          case 117: break;
          case 8: 
            { return EQUALS;
            } 
            // fall through
          case 118: break;
          case 9: 
            { return STRING;
            } 
            // fall through
          case 119: break;
          case 10: 
            { return POUND;
            } 
            // fall through
          case 120: break;
          case 11: 
            { return DOT;
            } 
            // fall through
          case 121: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 122: break;
          case 13: 
            { return RPAREN;
            } 
            // fall through
          case 123: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 124: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 125: break;
          case 16: 
            { return COMMA;
            } 
            // fall through
          case 126: break;
          case 17: 
            { return DBL_BAR;
            } 
            // fall through
          case 127: break;
          case 18: 
            { return LANGLE;
            } 
            // fall through
          case 128: break;
          case 19: 
            { return RANGLE;
            } 
            // fall through
          case 129: break;
          case 20: 
            { return LCEIL;
            } 
            // fall through
          case 130: break;
          case 21: 
            { return RCEIL;
            } 
            // fall through
          case 131: break;
          case 22: 
            { return LBRACK;
            } 
            // fall through
          case 132: break;
          case 23: 
            { return RBRACK;
            } 
            // fall through
          case 133: break;
          case 24: 
            { return BAR;
            } 
            // fall through
          case 134: break;
          case 25: 
            { return LBRACE;
            } 
            // fall through
          case 135: break;
          case 26: 
            { return RBRACE;
            } 
            // fall through
          case 136: break;
          case 27: 
            { return EXISTS;
            } 
            // fall through
          case 137: break;
          case 28: 
            { return FORALL;
            } 
            // fall through
          case 138: break;
          case 29: 
            { return TRIANGLEQ;
            } 
            // fall through
          case 139: break;
          case 30: 
            { return NEQUALS;
            } 
            // fall through
          case 140: break;
          case 31: 
            { return AND;
            } 
            // fall through
          case 141: break;
          case 32: 
            { return OR;
            } 
            // fall through
          case 142: break;
          case 33: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 143: break;
          case 34: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 144: break;
          case 35: 
            { return CMD;
            } 
            // fall through
          case 145: break;
          case 36: 
            { return COLON_EQUALS;
            } 
            // fall through
          case 146: break;
          case 37: 
            { return COLON_COLON;
            } 
            // fall through
          case 147: break;
          case 38: 
            { return IF;
            } 
            // fall through
          case 148: break;
          case 39: 
            { return IS;
            } 
            // fall through
          case 149: break;
          case 40: 
            { return PIECEWISE;
            } 
            // fall through
          case 150: break;
          case 41: 
            { return OF;
            } 
            // fall through
          case 151: break;
          case 42: 
            { return DO;
            } 
            // fall through
          case 152: break;
          case 43: 
            { return BY;
            } 
            // fall through
          case 153: break;
          case 44: 
            { return IF_PROG;
            } 
            // fall through
          case 154: break;
          case 45: 
            { return CHAR;
            } 
            // fall through
          case 155: break;
          case 46: 
            { return COLON_EQUALS_COLON;
            } 
            // fall through
          case 156: break;
          case 47: 
            { return COLON_COLON_COLON;
            } 
            // fall through
          case 157: break;
          case 48: 
            { return FOR;
            } 
            // fall through
          case 158: break;
          case 49: 
            { return END;
            } 
            // fall through
          case 159: break;
          case 50: 
            { return DEFINITION;
            } 
            // fall through
          case 160: break;
          case 51: 
            { return VAR;
            } 
            // fall through
          case 161: break;
          case 52: 
            { return IND_BASE;
            } 
            // fall through
          case 162: break;
          case 53: 
            { return FROM;
            } 
            // fall through
          case 163: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 164: break;
          case 55: 
            { return TRUE;
            } 
            // fall through
          case 165: break;
          case 56: 
            { return TYPE_PARAM;
            } 
            // fall through
          case 166: break;
          case 57: 
            { return THEN;
            } 
            // fall through
          case 167: break;
          case 58: 
            { return USES;
            } 
            // fall through
          case 168: break;
          case 59: 
            { return WITH;
            } 
            // fall through
          case 169: break;
          case 60: 
            { return TYPE_FAMILY;
            } 
            // fall through
          case 170: break;
          case 61: 
            { return IND_HYPO;
            } 
            // fall through
          case 171: break;
          case 62: 
            { return FALSE;
            } 
            // fall through
          case 172: break;
          case 63: 
            { return WHILE;
            } 
            // fall through
          case 173: break;
          case 64: 
            { return FAMILY;
            } 
            // fall through
          case 174: break;
          case 65: 
            { return ALTERS;
            } 
            // fall through
          case 175: break;
          case 66: 
            { return PRECIS;
            } 
            // fall through
          case 176: break;
          case 67: 
            { return CLEARS;
            } 
            // fall through
          case 177: break;
          case 68: 
            { return RECORD;
            } 
            // fall through
          case 178: break;
          case 69: 
            { return VALUED;
            } 
            // fall through
          case 179: break;
          case 70: 
            { return EFORALL;
            } 
            // fall through
          case 180: break;
          case 71: 
            { return EEXISTS;
            } 
            // fall through
          case 181: break;
          case 72: 
            { return EXTENDS;
            } 
            // fall through
          case 182: break;
          case 73: 
            { return ENSURES;
            } 
            // fall through
          case 183: break;
          case 74: 
            { return COERCER;
            } 
            // fall through
          case 184: break;
          case 75: 
            { return CONCEPT;
            } 
            // fall through
          case 185: break;
          case 76: 
            { return MODELED;
            } 
            // fall through
          case 186: break;
          case 77: 
            { return UPDATES;
            } 
            // fall through
          case 187: break;
          case 78: 
            { return GENERIC;
            } 
            // fall through
          case 188: break;
          case 79: 
            { return LITERAL;
            } 
            // fall through
          case 189: break;
          case 80: 
            { return THEOREM;
            } 
            // fall through
          case 190: break;
          case 81: 
            { return REALIZED;
            } 
            // fall through
          case 191: break;
          case 82: 
            { return RESTORES;
            } 
            // fall through
          case 192: break;
          case 83: 
            { return REQUIRES;
            } 
            // fall through
          case 193: break;
          case 84: 
            { return REPLACES;
            } 
            // fall through
          case 194: break;
          case 85: 
            { return EXEMPLAR;
            } 
            // fall through
          case 195: break;
          case 86: 
            { return ENHANCED;
            } 
            // fall through
          case 196: break;
          case 87: 
            { return CHANGING;
            } 
            // fall through
          case 197: break;
          case 88: 
            { return FACILITY;
            } 
            // fall through
          case 198: break;
          case 89: 
            { return IMPLICIT;
            } 
            // fall through
          case 199: break;
          case 90: 
            { return OTHERWISE;
            } 
            // fall through
          case 200: break;
          case 91: 
            { return EVALUATES;
            } 
            // fall through
          case 201: break;
          case 92: 
            { return COROLLARY;
            } 
            // fall through
          case 202: break;
          case 93: 
            { return CART_PROD;
            } 
            // fall through
          case 203: break;
          case 94: 
            { return PROCEDURE;
            } 
            // fall through
          case 204: break;
          case 95: 
            { return PRESERVES;
            } 
            // fall through
          case 205: break;
          case 96: 
            { return INDUCTIVE;
            } 
            // fall through
          case 206: break;
          case 97: 
            { return RECURSIVE;
            } 
            // fall through
          case 207: break;
          case 98: 
            { return OPERATION;
            } 
            // fall through
          case 208: break;
          case 99: 
            { return EXTERNALLY;
            } 
            // fall through
          case 209: break;
          case 100: 
            { return DECREASING;
            } 
            // fall through
          case 210: break;
          case 101: 
            { return CATEGORICAL;
            } 
            // fall through
          case 211: break;
          case 102: 
            { return CONVENTIONS;
            } 
            // fall through
          case 212: break;
          case 103: 
            { return CONSTRAINTS;
            } 
            // fall through
          case 213: break;
          case 104: 
            { return ENHANCEMENT;
            } 
            // fall through
          case 214: break;
          case 105: 
            { return MAINTAINING;
            } 
            // fall through
          case 215: break;
          case 106: 
            { return REALIZATION;
            } 
            // fall through
          case 216: break;
          case 107: 
            { return RECOGNITION;
            } 
            // fall through
          case 217: break;
          case 108: 
            { return WHICH_ENTAILS;
            } 
            // fall through
          case 218: break;
          case 109: 
            { return INITIALIZATION;
            } 
            // fall through
          case 219: break;
          case 110: 
            { return CORRESPONDENCE;
            } 
            // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
