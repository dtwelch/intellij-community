/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.resolve.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.resolve.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.jetbrains.resolve.ResolveParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15456 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\35\1\36\1\37\2\23\1\15\1\40\3\23\1\41\10\23\1\42\1\43\5\15\1\44"+
    "\1\45\11\23\1\46\2\23\1\47\5\23\1\50\4\23\1\51\1\52\4\23\51\15\1\53\3\15\1"+
    "\54\1\55\4\15\1\56\12\23\1\57\u0381\23");

  /* The ZZ_CMAP_Y table has 3072 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\15\34"+
    "\13\1\16\1\17\1\20\10\1\1\21\1\22\1\23\1\24\1\25\3\23\1\26\10\13\1\27\12\13"+
    "\1\30\1\13\1\31\1\30\1\13\1\32\4\1\1\13\1\33\1\34\2\1\2\13\1\33\1\1\1\35\1"+
    "\30\5\13\1\36\1\37\1\40\1\1\1\41\1\13\1\1\1\42\5\13\1\43\1\44\1\45\1\13\1"+
    "\33\1\46\1\13\1\47\1\50\1\1\1\13\1\51\4\1\1\13\1\52\4\1\1\53\2\13\1\54\1\1"+
    "\1\55\1\56\1\30\1\57\1\60\1\61\1\62\1\63\1\64\1\56\1\65\1\66\1\60\1\61\1\67"+
    "\1\1\1\70\1\71\1\72\1\73\1\74\1\61\1\75\1\1\1\76\1\56\1\77\1\100\1\60\1\61"+
    "\1\75\1\1\1\64\1\56\1\44\1\101\1\102\1\103\1\104\1\1\1\76\1\71\1\1\1\105\1"+
    "\41\1\61\1\54\1\1\1\106\1\56\1\1\1\107\1\41\1\61\1\110\1\1\1\63\1\56\1\111"+
    "\1\105\1\41\1\13\1\112\1\63\1\113\1\56\1\114\1\115\1\116\1\13\1\117\1\120"+
    "\1\1\1\71\1\1\1\30\2\13\1\121\1\120\1\122\2\1\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\2\1\1\76\1\1\1\122\1\1\1\131\1\13\1\132\1\1\1\133\7\1\2\13\1\33\1\134"+
    "\1\122\1\135\1\136\1\137\1\140\1\122\2\13\1\141\2\13\1\142\24\13\1\143\1\144"+
    "\2\13\1\143\2\13\1\145\1\146\1\15\3\13\1\146\3\13\1\33\2\1\1\13\1\1\5\13\1"+
    "\147\1\30\45\13\1\150\1\13\1\30\1\33\4\13\1\33\1\151\1\152\1\65\1\13\1\65"+
    "\1\13\1\65\1\152\1\76\3\13\1\153\1\1\1\154\1\122\2\1\1\122\5\13\1\32\1\155"+
    "\1\13\1\156\4\13\1\43\1\13\1\157\2\1\1\71\1\13\1\160\1\161\2\13\1\162\1\13"+
    "\1\104\1\122\2\1\1\13\1\120\3\13\1\161\2\1\2\122\1\163\5\1\1\115\2\13\1\153"+
    "\1\164\1\122\2\1\1\165\1\13\1\166\1\45\2\13\1\43\1\1\2\13\1\153\1\1\1\167"+
    "\1\45\1\13\1\160\1\51\5\1\1\170\1\171\14\13\4\1\21\13\1\147\2\13\1\147\1\172"+
    "\1\13\1\160\3\13\1\173\1\174\1\175\1\132\1\174\2\1\1\176\1\177\3\1\1\200\1"+
    "\1\1\132\6\1\1\201\1\202\1\203\1\204\1\205\3\1\1\206\1\207\1\210\1\211\1\212"+
    "\1\207\2\1\1\213\1\214\1\215\1\216\1\217\1\220\1\221\1\222\1\223\1\224\1\1"+
    "\1\225\1\226\3\1\1\227\115\1\1\230\1\231\40\1\1\232\37\1\2\13\1\157\2\13\1"+
    "\157\10\13\1\233\1\234\2\13\1\141\3\13\1\235\1\1\1\13\1\120\4\236\4\1\1\134"+
    "\35\1\1\237\2\1\1\240\1\30\4\13\1\241\1\30\4\13\1\142\1\115\1\13\1\160\1\30"+
    "\4\13\1\157\1\1\1\13\1\33\3\1\1\13\40\1\133\13\1\43\4\1\135\13\1\43\2\1\10"+
    "\13\1\132\4\1\2\13\1\160\20\13\1\132\1\13\1\242\1\1\2\13\1\157\1\134\1\13"+
    "\1\160\4\13\1\43\2\1\1\243\1\244\5\13\1\245\1\13\1\157\1\32\3\1\1\243\1\246"+
    "\1\13\1\34\1\1\3\13\1\153\1\244\2\13\1\153\1\1\1\122\1\1\1\247\1\45\1\13\1"+
    "\43\1\13\1\120\1\1\1\13\1\132\1\53\2\13\1\34\1\134\1\122\1\250\1\251\2\13"+
    "\1\51\1\1\1\252\1\122\1\13\1\253\3\13\1\254\1\255\1\256\1\33\1\72\1\257\1"+
    "\260\1\236\2\13\1\142\1\43\7\13\1\34\1\122\72\13\1\153\1\13\1\261\2\13\1\162"+
    "\120\1\26\13\1\160\6\13\1\104\2\1\1\120\1\262\1\61\1\263\1\264\6\13\1\65\1"+
    "\1\1\165\25\13\1\160\1\1\4\13\1\244\2\13\1\32\2\1\1\162\7\1\1\250\7\13\1\132"+
    "\1\1\1\122\1\30\1\33\1\30\1\33\1\265\4\13\1\157\1\266\1\267\2\1\1\270\1\13"+
    "\1\15\1\271\2\160\2\1\7\13\1\33\30\1\1\13\1\132\3\13\1\76\2\1\2\13\1\1\1\13"+
    "\1\272\2\13\1\43\1\13\1\160\2\13\1\273\3\1\11\13\1\160\1\122\2\13\1\273\1"+
    "\13\1\162\2\13\1\32\3\13\1\153\11\1\23\13\1\120\1\13\1\43\1\32\11\1\1\274"+
    "\2\13\1\275\1\13\1\43\1\13\1\120\1\13\1\157\4\1\1\13\1\276\1\13\1\43\1\13"+
    "\1\104\4\1\3\13\1\277\4\1\1\76\1\300\1\13\1\153\2\1\1\13\1\132\1\13\1\132"+
    "\2\1\1\131\1\13\1\161\1\1\3\13\1\43\1\13\1\43\1\13\1\34\1\13\1\65\6\1\4\13"+
    "\1\51\3\1\3\13\1\34\3\13\1\34\60\1\1\165\2\13\1\32\2\1\1\71\1\1\1\165\2\13"+
    "\2\1\1\13\1\51\1\122\1\165\1\13\1\120\1\71\1\1\2\13\1\301\1\165\2\13\1\34"+
    "\1\302\1\303\2\1\1\13\1\74\1\162\5\1\1\304\1\305\1\51\2\13\1\157\1\1\1\122"+
    "\1\100\1\60\1\61\1\75\1\1\1\306\1\65\11\1\3\13\1\161\1\307\1\122\2\1\3\13"+
    "\1\1\1\310\1\122\12\1\2\13\1\157\2\1\1\311\2\1\3\13\1\1\1\312\1\122\2\1\2"+
    "\13\1\33\1\1\1\122\3\1\1\13\1\104\1\1\1\122\26\1\4\13\1\122\1\134\34\1\3\13"+
    "\1\51\20\1\1\61\1\13\1\157\1\1\1\76\1\122\1\1\1\244\1\13\67\1\71\13\1\104"+
    "\16\1\14\13\1\153\53\1\2\13\1\157\75\1\44\13\1\120\33\1\43\13\1\51\1\13\1"+
    "\157\1\122\6\1\1\13\1\160\1\1\3\13\1\1\1\153\1\122\1\165\1\313\1\13\67\1\4"+
    "\13\1\161\1\76\3\1\1\165\4\1\1\76\1\1\76\13\1\132\1\1\57\13\1\34\20\1\1\65"+
    "\77\1\6\13\1\33\1\132\1\51\1\104\66\1\5\13\1\250\3\13\1\152\1\314\1\315\1"+
    "\316\1\317\2\13\1\320\1\321\1\13\1\322\1\323\1\41\24\13\1\324\1\13\1\41\1"+
    "\142\1\13\1\142\1\13\1\250\1\13\1\250\1\157\1\13\1\157\1\13\1\61\1\13\1\61"+
    "\1\13\1\325\3\326\14\13\1\161\3\1\4\13\1\153\1\122\112\1\1\316\1\13\1\327"+
    "\1\330\1\331\1\332\1\333\1\334\1\335\1\162\1\336\1\162\24\1\55\13\1\120\2"+
    "\1\103\13\1\161\15\13\1\160\150\13\1\65\25\1\41\13\1\160\36\1");

  /* The ZZ_CMAP_A table has 3568 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\17\1\22\1\30\3\0\1\27\1\32\1\33\1\6\1"+
    "\17\1\40\1\17\1\31\1\5\1\13\10\25\1\12\1\35\1\37\1\20\1\21\1\20\2\0\2\7\1"+
    "\67\1\102\4\7\1\105\5\7\1\111\1\71\1\7\1\110\1\7\1\114\1\24\1\115\1\116\3"+
    "\7\1\47\1\23\1\50\1\0\1\10\1\0\1\61\1\65\1\75\1\72\1\73\1\56\1\74\1\76\1\41"+
    "\2\7\1\62\1\104\1\77\1\57\1\100\1\113\1\60\1\101\1\70\1\107\1\26\1\112\1\103"+
    "\1\66\1\106\1\51\1\53\1\52\1\17\6\0\1\1\24\0\1\7\1\0\1\14\10\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\14\17\7\1\0\12\7\4\0\12\7\1\36\1\7\16\0\5\7\7\0\1\7\1\0\1\7\1"+
    "\0\5\15\1\14\2\15\2\14\4\15\1\14\1\15\6\14\1\15\1\14\3\15\1\14\1\15\1\14\24"+
    "\15\1\14\30\15\1\63\12\15\1\14\11\15\2\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10"+
    "\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\11\3\7"+
    "\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4\0\1\7\5\0\6"+
    "\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\1\0\10\7\6\0\26\7\3\0\1\7\2\0"+
    "\1\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7\23\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1"+
    "\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\3\7\1\0\16\7\1\0\2"+
    "\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1"+
    "\0\2\7\10\0\3\7\5\0\1\7\4\0\10\7\1\0\6\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7"+
    "\2\0\1\7\6\0\3\7\10\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0"+
    "\7\7\11\0\1\7\1\0\2\7\14\0\12\11\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6"+
    "\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2"+
    "\0\5\7\1\0\1\7\11\0\12\11\2\0\14\7\1\0\24\7\13\0\5\7\22\0\7\7\4\0\4\7\3\0"+
    "\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1"+
    "\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1"+
    "\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1"+
    "\7\4\0\1\7\3\0\5\7\2\0\22\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\5\7\13\0\14\7\13"+
    "\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11"+
    "\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3"+
    "\0\4\7\2\0\6\7\14\0\2\1\10\0\1\34\16\0\1\7\15\0\1\7\2\0\1\15\4\0\1\7\2\0\12"+
    "\7\1\0\1\15\2\0\1\14\1\7\1\15\2\7\1\15\6\0\1\15\1\0\1\7\1\0\1\7\1\0\4\7\1"+
    "\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\14\0\1\14\1\0\1\14\1\0\1\14\23\0\2"+
    "\14\21\0\10\14\14\0\1\55\2\0\1\54\4\0\2\14\5\0\1\16\1\0\1\16\6\0\2\14\3\0"+
    "\1\14\7\0\1\42\1\0\4\14\15\0\1\14\3\0\1\14\6\0\1\14\4\0\1\14\7\0\1\14\13\0"+
    "\1\64\3\0\2\14\2\0\2\14\4\0\2\14\6\0\2\14\10\0\2\14\4\0\2\14\2\0\2\14\6\0"+
    "\1\14\6\0\3\14\1\0\1\14\10\0\4\14\12\0\4\16\2\0\1\14\1\0\3\14\15\0\1\45\1"+
    "\46\16\0\1\43\1\44\13\0\6\14\5\0\3\16\1\0\1\16\13\0\5\7\6\0\4\7\3\0\2\7\14"+
    "\0\10\7\7\0\10\7\1\0\7\7\6\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\11\2"+
    "\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0"+
    "\1\7\2\0\5\7\1\0\12\7\12\11\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1"+
    "\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11"+
    "\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1"+
    "\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7"+
    "\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4"+
    "\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\11"+
    "\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\7\0\4\7\11"+
    "\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7"+
    "\1\0\14\7\1\0\1\7\1\0\7\7\1\0\32\7\1\15\6\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\13"+
    "\7\1\15\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\11\1\0\2"+
    "\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1"+
    "\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7"+
    "\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\4\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\5\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\4\5\1\40\1\41\21\5\1\42"+
    "\1\43\1\0\1\11\4\0\1\44\1\45\1\46\1\5"+
    "\1\47\1\50\1\51\3\5\1\52\3\5\1\53\17\5"+
    "\1\54\13\5\1\43\1\0\1\55\1\1\2\0\1\56"+
    "\1\5\1\57\21\5\1\60\5\5\1\61\14\5\1\62"+
    "\2\5\1\43\2\0\1\63\1\0\1\5\1\64\14\5"+
    "\1\65\16\5\1\66\5\5\1\67\3\5\1\0\1\70"+
    "\42\5\1\71\1\0\1\5\1\72\4\5\1\73\7\5"+
    "\1\74\3\5\1\75\16\5\1\76\1\77\6\5\1\100"+
    "\1\101\5\5\1\102\4\5\1\103\3\5\1\104\5\5"+
    "\1\105\2\5\1\106\1\107\1\110\7\5\1\111\4\5"+
    "\1\112\6\5\1\113\1\114\1\115\1\5\1\116\1\117"+
    "\1\120\1\5\1\121\2\5\1\122\2\5\1\123\1\124"+
    "\4\5\1\61\5\5\1\125\1\126\1\127\1\130\1\131"+
    "\4\5\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\117\0\236\0\355\0\117\0\u013c"+
    "\0\u018b\0\117\0\117\0\u013c\0\117\0\u01da\0\u0229\0\u0278"+
    "\0\u02c7\0\117\0\117\0\u0316\0\117\0\117\0\u0365\0\u013c"+
    "\0\117\0\117\0\u03b4\0\117\0\117\0\117\0\117\0\117"+
    "\0\117\0\117\0\u0403\0\u0452\0\117\0\117\0\117\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u013c\0\117\0\u05dd\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
    "\0\u0bba\0\117\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\117"+
    "\0\u013c\0\u0d94\0\u013c\0\117\0\117\0\u0de3\0\u0e32\0\u0e81"+
    "\0\u013c\0\u0ed0\0\u0f1f\0\u0f6e\0\u013c\0\u0fbd\0\u100c\0\u105b"+
    "\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3"+
    "\0\u1322\0\u1371\0\u13c0\0\u140f\0\u013c\0\u145e\0\u14ad\0\u14fc"+
    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
    "\0\u17c3\0\u1812\0\117\0\u0c58\0\u1861\0\u18b0\0\117\0\u18ff"+
    "\0\u013c\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0"+
    "\0\u1def\0\u1e3e\0\u013c\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9"+
    "\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241"+
    "\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc\0\u013c\0\u241b\0\u246a"+
    "\0\117\0\u17c3\0\u24b9\0\117\0\u2508\0\u2557\0\u013c\0\u25a6"+
    "\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e"+
    "\0\u286d\0\u28bc\0\u290b\0\u013c\0\u295a\0\u29a9\0\u29f8\0\u2a47"+
    "\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf"+
    "\0\u2d0e\0\u2d5d\0\u013c\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8"+
    "\0\u013c\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\117\0\u3073\0\u30c2"+
    "\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a"+
    "\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2"+
    "\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a"+
    "\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2"+
    "\0\u013c\0\u3af1\0\u3b40\0\u013c\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c"+
    "\0\u013c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5"+
    "\0\u013c\0\u3ef4\0\u3f43\0\u3f92\0\u013c\0\u3fe1\0\u4030\0\u407f"+
    "\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7"+
    "\0\u4346\0\u4395\0\u43e4\0\u013c\0\117\0\u4433\0\u4482\0\u44d1"+
    "\0\u4520\0\u456f\0\u45be\0\u013c\0\u013c\0\u460d\0\u465c\0\u46ab"+
    "\0\u46fa\0\u4749\0\u013c\0\u4798\0\u47e7\0\u4836\0\u4885\0\u013c"+
    "\0\u48d4\0\u4923\0\u4972\0\u013c\0\u49c1\0\u4a10\0\u4a5f\0\u4aae"+
    "\0\u4afd\0\u013c\0\u4b4c\0\u4b9b\0\u013c\0\u013c\0\u013c\0\u4bea"+
    "\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u013c\0\u4e13"+
    "\0\u4e62\0\u4eb1\0\u4f00\0\u013c\0\u4f4f\0\u4f9e\0\u4fed\0\u503c"+
    "\0\u508b\0\u50da\0\u013c\0\u013c\0\u013c\0\u5129\0\u013c\0\u013c"+
    "\0\u013c\0\u5178\0\u013c\0\u51c7\0\u5216\0\u013c\0\u5265\0\u52b4"+
    "\0\u013c\0\u013c\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u013c\0\u543f"+
    "\0\u548e\0\u54dd\0\u552c\0\u557b\0\u013c\0\u013c\0\u013c\0\u013c"+
    "\0\u013c\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u013c\0\u013c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\7"+
    "\1\17\1\20\1\10\1\11\1\10\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\10\1\54\1\55\1\56\1\10\1\57\1\60\1\61"+
    "\1\10\1\62\1\10\1\63\2\10\1\64\1\10\1\65"+
    "\1\10\1\66\1\67\1\10\1\70\1\71\1\72\1\73"+
    "\1\10\1\74\1\75\1\76\120\0\2\3\1\0\1\3"+
    "\117\0\1\77\1\100\12\0\1\7\104\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\32\10\12\0\2\11\11\0\1\11\112\0"+
    "\1\7\75\0\2\101\1\0\17\101\1\102\1\0\73\101"+
    "\56\0\1\103\40\0\23\104\1\105\73\104\41\0\1\106"+
    "\76\0\1\107\13\0\1\110\70\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\1\111"+
    "\5\10\1\0\12\10\1\112\1\10\1\113\15\10\51\0"+
    "\1\114\117\0\1\115\53\0\5\10\1\0\1\10\6\0"+
    "\3\10\7\0\1\10\2\0\1\10\14\0\1\10\1\116"+
    "\1\117\1\120\2\10\1\0\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\1\121\5\10\1\0\3\10\1\122\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\6\10\1\123\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\124\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\1\10\1\125\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\1\10\1\126\1\10\1\127\2\10\1\0\11\10"+
    "\1\130\20\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\1\10"+
    "\1\131\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\132\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\2\10"+
    "\1\133\7\0\1\10\2\0\1\10\14\0\6\10\1\0"+
    "\12\10\1\134\3\10\1\135\13\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\1\10\1\136\2\10\1\137\1\10\1\0\11\10\1\140"+
    "\20\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\2\10\1\141\3\10\1\0"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\6\10\1\0\6\10\1\142"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\1\10\1\143\1\10\1\144"+
    "\2\10\1\0\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\7\0\1\10\2\0\1\10\14\0\1\145\5\10"+
    "\1\0\12\10\1\146\4\10\1\147\12\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\13\10\1\150\1\151\15\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\6\10\1\152\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\13\10\1\153\16\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\11\10\1\154\20\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\1\10\1\155\7\10\1\156"+
    "\20\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\3\10\1\157\2\10\1\0"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\6\10\1\0\11\10\1\160"+
    "\20\10\2\77\1\0\114\77\6\100\1\161\110\100\13\0"+
    "\1\17\6\0\1\17\1\0\3\17\27\0\1\17\1\0"+
    "\2\17\3\0\1\17\2\0\1\17\6\0\1\17\3\0"+
    "\1\17\3\0\1\17\66\0\1\162\66\0\1\163\112\0"+
    "\1\104\2\0\1\104\1\164\26\0\1\104\1\0\2\104"+
    "\3\0\1\104\2\0\1\104\6\0\1\104\50\0\1\165"+
    "\7\0\1\166\112\0\1\167\70\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\170\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\171\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\1\10\1\172\4\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\17\10"+
    "\1\173\12\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\11\10"+
    "\1\174\20\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\13\10"+
    "\1\175\1\176\11\10\1\177\3\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\3\10\1\200\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\2\10\1\201\3\10\1\0\6\10\1\202\3\10\1\203"+
    "\17\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\2\10\1\204\3\10\1\0"+
    "\3\10\1\205\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\7\0\1\10\2\0\1\10\14\0\3\10\1\206"+
    "\2\10\1\0\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\7\0\1\10\2\0\1\10\14\0\6\10\1\0"+
    "\13\10\1\207\16\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\7\0\1\10\2\0\1\10\14\0\1\10\1\210"+
    "\4\10\1\0\6\10\1\211\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\3\10\1\212\2\10\1\0\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\5\10\1\213\24\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\3\10\1\214\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\12\10\1\215\17\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\6\10\1\216\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\3\10\1\217\2\10\1\0\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\6\10\1\0\6\10\1\220\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\7\0\1\10\2\0\1\10\14\0"+
    "\1\221\5\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\5\10\1\222\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\223\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\5\10"+
    "\1\224\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\13\10"+
    "\1\225\16\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\5\10"+
    "\1\226\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\227\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\230\2\10"+
    "\1\0\10\10\1\231\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\6\10\1\232\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\233\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\13\10"+
    "\1\234\16\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\235\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\236\1\10"+
    "\1\237\1\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\240\14\0\6\10"+
    "\1\0\32\10\5\100\1\241\1\242\110\100\60\0\1\243"+
    "\71\0\1\244\114\0\1\245\74\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\3\10\1\246\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\17\10\1\247\12\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\250\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\251\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\4\10\1\252\1\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\3\10"+
    "\1\253\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\22\10"+
    "\1\254\7\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\255\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\1\10\1\256\4\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\257\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\10\10"+
    "\1\260\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\3\10"+
    "\1\261\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\262\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\263\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\264\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\265\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\266\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\4\10\1\267\1\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\270\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\271\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\3\10\1\272\2\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\12\10\1\273\17\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\274\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\275\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\6\10\1\276\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\12\10\1\277\17\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\22\10\1\300\7\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\301\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\3\10\1\302\2\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\14\10\1\303\15\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\304\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\1\10\1\305\4\10\1\0\22\10\1\306\7\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\307\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\310\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\311\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\1\10\1\312\4\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\22\10\1\313\7\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\4\10\1\314\1\10\1\0\32\10"+
    "\61\0\1\315\70\0\1\316\72\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\317\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\4\10\1\320\1\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\321\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\322\2\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\1\10\1\323\4\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\324\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\325\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\4\10\1\326\1\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\327\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\330\23\10"+
    "\7\0\1\10\1\331\3\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\7\10\1\332\22\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\12\10\1\333\17\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\334\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\335\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\22\10\1\336\7\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\12\10\1\337\17\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\3\10\1\340\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\2\10\1\341\3\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\7\10\1\342\22\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\6\10\1\343\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\12\10\1\344\17\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\345\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\3\10\1\346\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\10\10\1\347\21\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\350"+
    "\14\0\6\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\3\10\1\351\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\352\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\7\10"+
    "\1\353\22\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\354\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\355\2\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\11\10"+
    "\1\356\20\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\357\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\360\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\361\23\10\62\0\1\362\43\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\3\10"+
    "\1\363\2\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\1\10\1\364\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\25\10\1\365\4\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\10\10\1\366\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\2\10"+
    "\1\367\3\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\2\10"+
    "\1\370\3\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\14\10\1\371\15\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\4\10"+
    "\1\372\1\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\6\10\1\373\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\13\10\1\374\16\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\4\10\1\375\25\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\1\10"+
    "\1\376\4\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\3\10"+
    "\1\377\2\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\5\10\1\u0100\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\14\10\1\u0101\15\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\3\10"+
    "\1\u0102\2\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\5\10\1\u0103\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\2\10"+
    "\1\u0104\3\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\14\10\1\u0105\15\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\u0106\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\2\10\1\u0107\3\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\u0108\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u0109\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\3\10\1\u010a\2\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\3\10\1\u010b\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\u010c\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u010d\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\21\10\1\u010e\10\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\12\10\1\u010f\17\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0110\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\3\10\1\u0111\26\10"+
    "\7\0\1\10\1\u0112\3\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u0113\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\5\10\1\u0114\24\10"+
    "\62\0\1\u0115\43\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\4\10\1\u0116\1\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\u0117\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u0118\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u0119\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u011a\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\3\10\1\u011b\2\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\u011c\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\3\10\1\u011d\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\u011e\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\u011f\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\1\u0120\31\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\22\10\1\u0121\7\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\3\10\1\u0122\26\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\14\10\1\u0123\15\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\3\10\1\u0124\2\10\1\0\32\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\7\0\1\10\2\0"+
    "\1\10\14\0\6\10\1\0\12\10\1\u0125\17\10\7\0"+
    "\5\10\1\0\1\10\6\0\2\10\1\u0126\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\3\10\1\u0127\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\5\10\1\u0128\24\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\u0129"+
    "\14\0\6\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\u012a\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\u012b\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u012c\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\3\10\1\u012d\2\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\u012e\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\u012f"+
    "\14\0\6\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\u0130\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\u0131\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\17\10"+
    "\1\u0132\12\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\u0133\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0134\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0135\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0136\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0137\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\2\10\1\u0138\3\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\1\10\1\u0139\4\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\u013a\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\u013b\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\2\10\1\u013c\3\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\6\10\1\u013d\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\u013e"+
    "\14\0\6\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\7\10\1\u013f\22\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\10\14\0\6\10"+
    "\1\0\6\10\1\u0140\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\u0141\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u0142\17\10\7\0\5\10\1\0\1\10\6\0\2\10"+
    "\1\u0143\7\0\1\10\2\0\1\10\14\0\6\10\1\0"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\6\10\1\0\3\10\1\u0144"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\6\10\1\0\3\10\1\u0145"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\3\10\7\0"+
    "\1\10\2\0\1\10\14\0\6\10\1\0\3\10\1\u0146"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\2\10\1\u0147"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\1\10\1\u0148\4\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\12\10\1\u0149\17\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\21\10\1\u014a\10\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u014b\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\1\10\1\u014c\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\5\10\1\u014d\24\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\10\10\1\u014e\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u014f\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\6\10\1\u0150\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0151\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\12\10\1\u0152\17\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\6\10\1\0\14\10\1\u0153\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\10\14\0\1\10\1\u0154\4\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\u0155\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\6\10\1\u0156\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\u0157"+
    "\14\0\6\10\1\0\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\7\0\1\10\2\0\1\u0158\14\0\6\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\6\10"+
    "\1\u0159\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u015a\17\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\3\10"+
    "\1\u015b\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\u015c\2\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\u015d\2\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\3\10"+
    "\1\u015e\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u015f\17\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u0160\17\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\1\10\1\u0161\4\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\1\10\1\u0162\4\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\3\10\1\u0163\2\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\3\10"+
    "\1\u0164\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\4\10\1\u0165\1\10"+
    "\1\0\32\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\14\10"+
    "\1\u0166\15\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\7\10"+
    "\1\u0167\22\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u0168\17\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\10\14\0\6\10\1\0\12\10"+
    "\1\u0169\17\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\7\0\1\10\2\0\1\u016a\14\0\6\10\1\0\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\7\0\1\10"+
    "\2\0\1\u016b\14\0\6\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\4\10\1\u016c\1\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\1\10\1\u016d\4\10\1\0\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\14\10\1\u016e\15\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\7\0\1\10\2\0\1\10"+
    "\14\0\6\10\1\0\12\10\1\u016f\17\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\4\1\2\11\1\1\2\11\2\1\2\11"+
    "\1\1\7\11\2\1\3\11\5\1\1\11\23\1\1\0"+
    "\1\11\4\0\1\1\1\11\3\1\2\11\44\1\1\0"+
    "\1\11\1\1\2\0\1\11\51\1\1\11\2\0\1\11"+
    "\1\0\47\1\1\0\1\11\43\1\1\0\42\1\1\11"+
    "\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 92: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 93: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 94: break;
          case 4: 
            { return SYMBOL;
            } 
            // fall through
          case 95: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 96: break;
          case 6: 
            { return INT;
            } 
            // fall through
          case 97: break;
          case 7: 
            { return MATHSYMBOL;
            } 
            // fall through
          case 98: break;
          case 8: 
            { return BIGOPERATOR;
            } 
            // fall through
          case 99: break;
          case 9: 
            { return STRING;
            } 
            // fall through
          case 100: break;
          case 10: 
            { return BACKSLASH;
            } 
            // fall through
          case 101: break;
          case 11: 
            { return POUND;
            } 
            // fall through
          case 102: break;
          case 12: 
            { return DOT;
            } 
            // fall through
          case 103: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 104: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 105: break;
          case 15: 
            { return PRIME;
            } 
            // fall through
          case 106: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 107: break;
          case 17: 
            { return TRICOLON;
            } 
            // fall through
          case 108: break;
          case 18: 
            { return SEMICOLON;
            } 
            // fall through
          case 109: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 110: break;
          case 20: 
            { return DBL_BAR;
            } 
            // fall through
          case 111: break;
          case 21: 
            { return LANGLE;
            } 
            // fall through
          case 112: break;
          case 22: 
            { return RANGLE;
            } 
            // fall through
          case 113: break;
          case 23: 
            { return LCEIL;
            } 
            // fall through
          case 114: break;
          case 24: 
            { return RCEIL;
            } 
            // fall through
          case 115: break;
          case 25: 
            { return LBRACK;
            } 
            // fall through
          case 116: break;
          case 26: 
            { return RBRACK;
            } 
            // fall through
          case 117: break;
          case 27: 
            { return LBRACE;
            } 
            // fall through
          case 118: break;
          case 28: 
            { return RBRACE;
            } 
            // fall through
          case 119: break;
          case 29: 
            { return BAR;
            } 
            // fall through
          case 120: break;
          case 30: 
            { return EXISTS;
            } 
            // fall through
          case 121: break;
          case 31: 
            { return FORALL;
            } 
            // fall through
          case 122: break;
          case 32: 
            { return LAMBDA;
            } 
            // fall through
          case 123: break;
          case 33: 
            { return TRI_EQUALS;
            } 
            // fall through
          case 124: break;
          case 34: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 125: break;
          case 35: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 126: break;
          case 36: 
            { return COLON_EQUALS;
            } 
            // fall through
          case 127: break;
          case 37: 
            { return COLON_COLON;
            } 
            // fall through
          case 128: break;
          case 38: 
            { return IF;
            } 
            // fall through
          case 129: break;
          case 39: 
            { return IS;
            } 
            // fall through
          case 130: break;
          case 40: 
            { return DBL_LBRACE;
            } 
            // fall through
          case 131: break;
          case 41: 
            { return DBL_RBRACE;
            } 
            // fall through
          case 132: break;
          case 42: 
            { return OF;
            } 
            // fall through
          case 133: break;
          case 43: 
            { return BY;
            } 
            // fall through
          case 134: break;
          case 44: 
            { return IF_PROG;
            } 
            // fall through
          case 135: break;
          case 45: 
            { return CHAR;
            } 
            // fall through
          case 136: break;
          case 46: 
            { return COLON_EQUALS_COLON;
            } 
            // fall through
          case 137: break;
          case 47: 
            { return FOR;
            } 
            // fall through
          case 138: break;
          case 48: 
            { return END;
            } 
            // fall through
          case 139: break;
          case 49: 
            { return DEFINITION;
            } 
            // fall through
          case 140: break;
          case 50: 
            { return VAR;
            } 
            // fall through
          case 141: break;
          case 51: 
            { return IND_BASE;
            } 
            // fall through
          case 142: break;
          case 52: 
            { return FROM;
            } 
            // fall through
          case 143: break;
          case 53: 
            { return TYPE_PARAM;
            } 
            // fall through
          case 144: break;
          case 54: 
            { return USES;
            } 
            // fall through
          case 145: break;
          case 55: 
            { return TYPE_FAMILY;
            } 
            // fall through
          case 146: break;
          case 56: 
            { return IND_HYPO;
            } 
            // fall through
          case 147: break;
          case 57: 
            { return WHILE;
            } 
            // fall through
          case 148: break;
          case 58: 
            { return FAMILY;
            } 
            // fall through
          case 149: break;
          case 59: 
            { return ALTERS;
            } 
            // fall through
          case 150: break;
          case 60: 
            { return PRECIS;
            } 
            // fall through
          case 151: break;
          case 61: 
            { return CLEARS;
            } 
            // fall through
          case 152: break;
          case 62: 
            { return VALUED;
            } 
            // fall through
          case 153: break;
          case 63: 
            { return EFORALL;
            } 
            // fall through
          case 154: break;
          case 64: 
            { return COERCER;
            } 
            // fall through
          case 155: break;
          case 65: 
            { return CONCEPT;
            } 
            // fall through
          case 156: break;
          case 66: 
            { return EXTENDS;
            } 
            // fall through
          case 157: break;
          case 67: 
            { return MODELED;
            } 
            // fall through
          case 158: break;
          case 68: 
            { return UPDATES;
            } 
            // fall through
          case 159: break;
          case 69: 
            { return THEOREM;
            } 
            // fall through
          case 160: break;
          case 70: 
            { return REPLACES;
            } 
            // fall through
          case 161: break;
          case 71: 
            { return RESTORES;
            } 
            // fall through
          case 162: break;
          case 72: 
            { return REQUIRES;
            } 
            // fall through
          case 163: break;
          case 73: 
            { return CHANGING;
            } 
            // fall through
          case 164: break;
          case 74: 
            { return IMPLICIT;
            } 
            // fall through
          case 165: break;
          case 75: 
            { return OTHERWISE;
            } 
            // fall through
          case 166: break;
          case 76: 
            { return COROLLARY;
            } 
            // fall through
          case 167: break;
          case 77: 
            { return CART_PROD;
            } 
            // fall through
          case 168: break;
          case 78: 
            { return CHAINABLE;
            } 
            // fall through
          case 169: break;
          case 79: 
            { return PROCEDURE;
            } 
            // fall through
          case 170: break;
          case 80: 
            { return EVALUATES;
            } 
            // fall through
          case 171: break;
          case 81: 
            { return PRESERVES;
            } 
            // fall through
          case 172: break;
          case 82: 
            { return INDUCTIVE;
            } 
            // fall through
          case 173: break;
          case 83: 
            { return RECURSIVE;
            } 
            // fall through
          case 174: break;
          case 84: 
            { return OPERATION;
            } 
            // fall through
          case 175: break;
          case 85: 
            { return CATEGORICAL;
            } 
            // fall through
          case 176: break;
          case 86: 
            { return CONSTRAINTS;
            } 
            // fall through
          case 177: break;
          case 87: 
            { return MAINTAINING;
            } 
            // fall through
          case 178: break;
          case 88: 
            { return REALIZATION;
            } 
            // fall through
          case 179: break;
          case 89: 
            { return RECOGNITION;
            } 
            // fall through
          case 180: break;
          case 90: 
            { return WHICH_ENTAILS;
            } 
            // fall through
          case 181: break;
          case 91: 
            { return INITIALIZATION;
            } 
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
